// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AbortReinstallMachine(params *AbortReinstallMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortReinstallMachineOK, error)

	AddProvisioningEvent(params *AddProvisioningEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProvisioningEventOK, error)

	AllocateFirewall(params *AllocateFirewallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateFirewallOK, error)

	AllocateIP(params *AllocateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateIPCreated, error)

	AllocateMachine(params *AllocateMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateMachineOK, error)

	AllocateNetwork(params *AllocateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateNetworkCreated, error)

	AllocateSpecificIP(params *AllocateSpecificIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateSpecificIPCreated, error)

	ChassisIdentifyLEDOff(params *ChassisIdentifyLEDOffParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChassisIdentifyLEDOffOK, error)

	ChassisIdentifyLEDOn(params *ChassisIdentifyLEDOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChassisIdentifyLEDOnOK, error)

	CreateFilesystemLayout(params *CreateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilesystemLayoutCreated, error)

	CreateImage(params *CreateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateImageCreated, error)

	CreateNetwork(params *CreateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkCreated, error)

	CreatePartition(params *CreatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePartitionCreated, error)

	CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectCreated, error)

	CreateSize(params *CreateSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSizeCreated, error)

	DeleteFilesystemLayout(params *DeleteFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilesystemLayoutOK, error)

	DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageOK, error)

	DeleteMachine(params *DeleteMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMachineOK, error)

	DeleteNetwork(params *DeleteNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkOK, error)

	DeletePartition(params *DeletePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePartitionOK, error)

	DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectOK, error)

	DeleteSize(params *DeleteSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSizeOK, error)

	DeleteSwitch(params *DeleteSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSwitchOK, error)

	FinalizeAllocation(params *FinalizeAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FinalizeAllocationOK, error)

	FindFirewall(params *FindFirewallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFirewallOK, error)

	FindFirewalls(params *FindFirewallsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFirewallsOK, error)

	FindIP(params *FindIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIPOK, error)

	FindIPMIMachine(params *FindIPMIMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIPMIMachineOK, error)

	FindIPMIMachines(params *FindIPMIMachinesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIPMIMachinesOK, error)

	FindIPs(params *FindIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIPsOK, error)

	FindImage(params *FindImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindImageOK, error)

	FindLatestImage(params *FindLatestImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindLatestImageOK, error)

	FindMachine(params *FindMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMachineOK, error)

	FindMachines(params *FindMachinesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMachinesOK, error)

	FindNetwork(params *FindNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworkOK, error)

	FindNetworks(params *FindNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworksOK, error)

	FindPartition(params *FindPartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPartitionOK, error)

	FindProject(params *FindProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindProjectOK, error)

	FindProjects(params *FindProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindProjectsOK, error)

	FindSize(params *FindSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSizeOK, error)

	FindSwitch(params *FindSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSwitchOK, error)

	FreeIP(params *FreeIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FreeIPOK, error)

	FreeMachine(params *FreeMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FreeMachineOK, error)

	FreeNetwork(params *FreeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FreeNetworkOK, error)

	FromHardware(params *FromHardwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FromHardwareOK, error)

	GetFilesystemLayout(params *GetFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilesystemLayoutOK, error)

	GetMachineConsolePassword(params *GetMachineConsolePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMachineConsolePasswordOK, error)

	GetMe(params *GetMeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMeOK, error)

	GetProvisioningEventContainer(params *GetProvisioningEventContainerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProvisioningEventContainerOK, error)

	GetTenant(params *GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantOK, error)

	Health(params *HealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthOK, error)

	Info(params *InfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InfoOK, error)

	IpmiReport(params *IpmiReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IpmiReportOK, error)

	ListFilesystemLayouts(params *ListFilesystemLayoutsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFilesystemLayoutsOK, error)

	ListFirewalls(params *ListFirewallsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFirewallsOK, error)

	ListFirmwares(params *ListFirmwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFirmwaresOK, error)

	ListIPs(params *ListIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIPsOK, error)

	ListImages(params *ListImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListImagesOK, error)

	ListMachines(params *ListMachinesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMachinesOK, error)

	ListNetworks(params *ListNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListNetworksOK, error)

	ListPartitions(params *ListPartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPartitionsOK, error)

	ListProjects(params *ListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsOK, error)

	ListSizes(params *ListSizesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSizesOK, error)

	ListSwitches(params *ListSwitchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSwitchesOK, error)

	ListTenants(params *ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTenantsOK, error)

	MachineBios(params *MachineBiosParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineBiosOK, error)

	MachineCycle(params *MachineCycleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineCycleOK, error)

	MachineDisk(params *MachineDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineDiskOK, error)

	MachineOff(params *MachineOffParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineOffOK, error)

	MachineOn(params *MachineOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineOnOK, error)

	MachinePxe(params *MachinePxeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachinePxeOK, error)

	MachineReset(params *MachineResetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineResetOK, error)

	MatchFilesystemLayout(params *MatchFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchFilesystemLayoutOK, error)

	NotifySwitch(params *NotifySwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifySwitchOK, error)

	PartitionCapacity(params *PartitionCapacityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PartitionCapacityOK, error)

	QueryImagesByID(params *QueryImagesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryImagesByIDOK, error)

	RegisterMachine(params *RegisterMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterMachineOK, *RegisterMachineCreated, error)

	RegisterSwitch(params *RegisterSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterSwitchOK, *RegisterSwitchCreated, error)

	ReinstallMachine(params *ReinstallMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReinstallMachineOK, error)

	RemoveFirmware(params *RemoveFirmwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveFirmwareOK, error)

	SetChassisIdentifyLEDState(params *SetChassisIdentifyLEDStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetChassisIdentifyLEDStateOK, error)

	SetMachineState(params *SetMachineStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetMachineStateOK, error)

	TryFilesystemLayout(params *TryFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TryFilesystemLayoutOK, error)

	UpdateFilesystemLayout(params *UpdateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFilesystemLayoutOK, error)

	UpdateFirmware(params *UpdateFirmwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFirmwareOK, error)

	UpdateIP(params *UpdateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIPOK, error)

	UpdateImage(params *UpdateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateImageOK, error)

	UpdateNetwork(params *UpdateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkOK, error)

	UpdatePartition(params *UpdatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePartitionOK, error)

	UpdateProject(params *UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectOK, error)

	UpdateSize(params *UpdateSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSizeOK, error)

	UpdateSwitch(params *UpdateSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSwitchOK, error)

	UploadFirmware(params *UploadFirmwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadFirmwareOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AbortReinstallMachine aborts reinstall this machine
*/
func (a *Client) AbortReinstallMachine(params *AbortReinstallMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortReinstallMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbortReinstallMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "abortReinstallMachine",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/abort-reinstall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AbortReinstallMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AbortReinstallMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AbortReinstallMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddProvisioningEvent adds a machine provisioning event
*/
func (a *Client) AddProvisioningEvent(params *AddProvisioningEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProvisioningEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProvisioningEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProvisioningEvent",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/event",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddProvisioningEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProvisioningEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddProvisioningEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AllocateFirewall allocates a firewall
*/
func (a *Client) AllocateFirewall(params *AllocateFirewallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllocateFirewallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "allocateFirewall",
		Method:             "POST",
		PathPattern:        "/v1/firewall/allocate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllocateFirewallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllocateFirewallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllocateFirewallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AllocateIP allocates an ip in the given network
*/
func (a *Client) AllocateIP(params *AllocateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateIPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllocateIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "allocateIP",
		Method:             "POST",
		PathPattern:        "/v1/ip/allocate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllocateIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllocateIPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllocateIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AllocateMachine allocates a machine
*/
func (a *Client) AllocateMachine(params *AllocateMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllocateMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "allocateMachine",
		Method:             "POST",
		PathPattern:        "/v1/machine/allocate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllocateMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllocateMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllocateMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AllocateNetwork allocates a child network from a partition s private super network
*/
func (a *Client) AllocateNetwork(params *AllocateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateNetworkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllocateNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "allocateNetwork",
		Method:             "POST",
		PathPattern:        "/v1/network/allocate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllocateNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllocateNetworkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllocateNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AllocateSpecificIP allocates a specific ip in the given network
*/
func (a *Client) AllocateSpecificIP(params *AllocateSpecificIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateSpecificIPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllocateSpecificIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "allocateSpecificIP",
		Method:             "POST",
		PathPattern:        "/v1/ip/allocate/{ip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllocateSpecificIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllocateSpecificIPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllocateSpecificIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ChassisIdentifyLEDOff sends a power off to the chassis identify l e d
*/
func (a *Client) ChassisIdentifyLEDOff(params *ChassisIdentifyLEDOffParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChassisIdentifyLEDOffOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChassisIdentifyLEDOffParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "chassisIdentifyLEDOff",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/power/chassis-identify-led-off",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChassisIdentifyLEDOffReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChassisIdentifyLEDOffOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChassisIdentifyLEDOffDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ChassisIdentifyLEDOn sends a power on to the chassis identify l e d
*/
func (a *Client) ChassisIdentifyLEDOn(params *ChassisIdentifyLEDOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChassisIdentifyLEDOnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChassisIdentifyLEDOnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "chassisIdentifyLEDOn",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/power/chassis-identify-led-on",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChassisIdentifyLEDOnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChassisIdentifyLEDOnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChassisIdentifyLEDOnDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateFilesystemLayout creates a filesystemlayout if the given ID already exists a conflict is returned
*/
func (a *Client) CreateFilesystemLayout(params *CreateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilesystemLayoutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFilesystemLayout",
		Method:             "PUT",
		PathPattern:        "/v1/filesystemlayout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFilesystemLayoutCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateImage creates an image if the given ID already exists a conflict is returned
*/
func (a *Client) CreateImage(params *CreateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateImageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createImage",
		Method:             "PUT",
		PathPattern:        "/v1/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateImageCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateNetwork creates a network if the given ID already exists a conflict is returned
*/
func (a *Client) CreateNetwork(params *CreateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetwork",
		Method:             "PUT",
		PathPattern:        "/v1/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreatePartition creates a partition if the given ID already exists a conflict is returned
*/
func (a *Client) CreatePartition(params *CreatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePartitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePartitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPartition",
		Method:             "PUT",
		PathPattern:        "/v1/partition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePartitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePartitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateProject creates a project if the given ID already exists a conflict is returned
*/
func (a *Client) CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "PUT",
		PathPattern:        "/v1/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateSize creates a size if the given ID already exists a conflict is returned
*/
func (a *Client) CreateSize(params *CreateSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSizeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSize",
		Method:             "PUT",
		PathPattern:        "/v1/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSizeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSizeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteFilesystemLayout deletes an filesystemlayout and returns the deleted entity
*/
func (a *Client) DeleteFilesystemLayout(params *DeleteFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFilesystemLayout",
		Method:             "DELETE",
		PathPattern:        "/v1/filesystemlayout/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteImage deletes an image and returns the deleted entity
*/
func (a *Client) DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteImage",
		Method:             "DELETE",
		PathPattern:        "/v1/image/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteMachine deletes a machine from the database
*/
func (a *Client) DeleteMachine(params *DeleteMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMachine",
		Method:             "DELETE",
		PathPattern:        "/v1/machine/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteNetwork deletes a network and returns the deleted entity
*/
func (a *Client) DeleteNetwork(params *DeleteNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetwork",
		Method:             "DELETE",
		PathPattern:        "/v1/network/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeletePartition deletes a partition and returns the deleted entity
*/
func (a *Client) DeletePartition(params *DeletePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePartitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePartitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePartition",
		Method:             "DELETE",
		PathPattern:        "/v1/partition/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePartitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePartitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteProject deletes a project and returns the deleted entity
*/
func (a *Client) DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/v1/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteSize deletes an size and returns the deleted entity
*/
func (a *Client) DeleteSize(params *DeleteSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSize",
		Method:             "DELETE",
		PathPattern:        "/v1/size/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSizeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteSwitch deletes an switch and returns the deleted entity
*/
func (a *Client) DeleteSwitch(params *DeleteSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSwitchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSwitchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSwitch",
		Method:             "DELETE",
		PathPattern:        "/v1/switch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSwitchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSwitchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSwitchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FinalizeAllocation finalizes the allocation of the machine by reconfiguring the switch sent on successful image installation
*/
func (a *Client) FinalizeAllocation(params *FinalizeAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FinalizeAllocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFinalizeAllocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "finalizeAllocation",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/finalize-allocation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FinalizeAllocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FinalizeAllocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FinalizeAllocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindFirewall gets firewall by id
*/
func (a *Client) FindFirewall(params *FindFirewallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindFirewallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findFirewall",
		Method:             "GET",
		PathPattern:        "/v1/firewall/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindFirewallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindFirewallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindFirewallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindFirewalls finds firewalls by multiple criteria
*/
func (a *Client) FindFirewalls(params *FindFirewallsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFirewallsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindFirewallsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findFirewalls",
		Method:             "POST",
		PathPattern:        "/v1/firewall/find",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindFirewallsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindFirewallsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindFirewallsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindIP gets ip by id
*/
func (a *Client) FindIP(params *FindIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findIP",
		Method:             "GET",
		PathPattern:        "/v1/ip/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindIPMIMachine returns a machine including the ipmi connection data
*/
func (a *Client) FindIPMIMachine(params *FindIPMIMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIPMIMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindIPMIMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findIPMIMachine",
		Method:             "GET",
		PathPattern:        "/v1/machine/{id}/ipmi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindIPMIMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindIPMIMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindIPMIMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindIPMIMachines returns machines including the ipmi connection data
*/
func (a *Client) FindIPMIMachines(params *FindIPMIMachinesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIPMIMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindIPMIMachinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findIPMIMachines",
		Method:             "POST",
		PathPattern:        "/v1/machine/ipmi/find",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindIPMIMachinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindIPMIMachinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindIPMIMachinesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindIPs gets all ips that match given properties
*/
func (a *Client) FindIPs(params *FindIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIPsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindIPsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findIPs",
		Method:             "POST",
		PathPattern:        "/v1/ip/find",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindIPsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindIPsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindIPsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindImage gets image by id
*/
func (a *Client) FindImage(params *FindImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findImage",
		Method:             "GET",
		PathPattern:        "/v1/image/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindLatestImage finds latest image by id
*/
func (a *Client) FindLatestImage(params *FindLatestImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindLatestImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindLatestImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findLatestImage",
		Method:             "GET",
		PathPattern:        "/v1/image/{id}/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindLatestImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindLatestImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindLatestImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindMachine gets machine by id
*/
func (a *Client) FindMachine(params *FindMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMachine",
		Method:             "GET",
		PathPattern:        "/v1/machine/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindMachines finds machines by multiple criteria
*/
func (a *Client) FindMachines(params *FindMachinesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMachinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMachines",
		Method:             "POST",
		PathPattern:        "/v1/machine/find",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindMachinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMachinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindMachinesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindNetwork gets network by id
*/
func (a *Client) FindNetwork(params *FindNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findNetwork",
		Method:             "GET",
		PathPattern:        "/v1/network/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindNetworks gets all networks that match given properties
*/
func (a *Client) FindNetworks(params *FindNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findNetworks",
		Method:             "POST",
		PathPattern:        "/v1/network/find",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindPartition gets partition by id
*/
func (a *Client) FindPartition(params *FindPartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPartitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPartitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPartition",
		Method:             "GET",
		PathPattern:        "/v1/partition/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindPartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPartitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindPartitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindProject gets project by id
*/
func (a *Client) FindProject(params *FindProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findProject",
		Method:             "GET",
		PathPattern:        "/v1/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindProjects gets all projects that match given properties
*/
func (a *Client) FindProjects(params *FindProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findProjects",
		Method:             "POST",
		PathPattern:        "/v1/project/find",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindProjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindSize gets size by id
*/
func (a *Client) FindSize(params *FindSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findSize",
		Method:             "GET",
		PathPattern:        "/v1/size/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindSizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindSizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindSizeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindSwitch gets switch by id
*/
func (a *Client) FindSwitch(params *FindSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSwitchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSwitchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findSwitch",
		Method:             "GET",
		PathPattern:        "/v1/switch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindSwitchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindSwitchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindSwitchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FreeIP frees an ip
*/
func (a *Client) FreeIP(params *FreeIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FreeIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFreeIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "freeIP",
		Method:             "POST",
		PathPattern:        "/v1/ip/free/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FreeIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FreeIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FreeIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FreeMachine frees a machine
*/
func (a *Client) FreeMachine(params *FreeMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FreeMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFreeMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "freeMachine",
		Method:             "DELETE",
		PathPattern:        "/v1/machine/{id}/free",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FreeMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FreeMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FreeMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FreeNetwork frees a network
*/
func (a *Client) FreeNetwork(params *FreeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FreeNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFreeNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "freeNetwork",
		Method:             "POST",
		PathPattern:        "/v1/network/free/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FreeNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FreeNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FreeNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FromHardware searches all sizes for one to match the given hardwarespecs if nothing is found a list of entries is returned which describe the constraint which did not match
*/
func (a *Client) FromHardware(params *FromHardwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FromHardwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFromHardwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fromHardware",
		Method:             "POST",
		PathPattern:        "/v1/size/from-hardware",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FromHardwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FromHardwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FromHardwareDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFilesystemLayout gets filesystemlayout by id
*/
func (a *Client) GetFilesystemLayout(params *GetFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilesystemLayout",
		Method:             "GET",
		PathPattern:        "/v1/filesystemlayout/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMachineConsolePassword gets consolepassword for machine by id
*/
func (a *Client) GetMachineConsolePassword(params *GetMachineConsolePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMachineConsolePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachineConsolePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMachineConsolePassword",
		Method:             "GET",
		PathPattern:        "/v1/machine/consolepassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMachineConsolePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMachineConsolePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMachineConsolePasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMe extracts the connecting user from auth header
*/
func (a *Client) GetMe(params *GetMeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMe",
		Method:             "GET",
		PathPattern:        "/v1/user/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetProvisioningEventContainer gets the current machine provisioning event container
*/
func (a *Client) GetProvisioningEventContainer(params *GetProvisioningEventContainerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProvisioningEventContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningEventContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProvisioningEventContainer",
		Method:             "GET",
		PathPattern:        "/v1/machine/{id}/event",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningEventContainerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningEventContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProvisioningEventContainerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetTenant gets tenant by id
*/
func (a *Client) GetTenant(params *GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTenant",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Health performs a healthcheck
*/
func (a *Client) Health(params *HealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "health",
		Method:             "GET",
		PathPattern:        "/v1/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Info returns the current version information of this module
*/
func (a *Client) Info(params *InfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "info",
		Method:             "GET",
		PathPattern:        "/v1/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  IpmiReport reports IP m i ip addresses leased by a management server for machines
*/
func (a *Client) IpmiReport(params *IpmiReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IpmiReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIpmiReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ipmiReport",
		Method:             "POST",
		PathPattern:        "/v1/machine/ipmi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IpmiReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IpmiReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IpmiReportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListFilesystemLayouts gets all filesystemlayouts
*/
func (a *Client) ListFilesystemLayouts(params *ListFilesystemLayoutsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFilesystemLayoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFilesystemLayoutsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFilesystemLayouts",
		Method:             "GET",
		PathPattern:        "/v1/filesystemlayout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFilesystemLayoutsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFilesystemLayoutsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFilesystemLayoutsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListFirewalls gets all known firewalls
*/
func (a *Client) ListFirewalls(params *ListFirewallsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFirewallsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFirewallsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFirewalls",
		Method:             "GET",
		PathPattern:        "/v1/firewall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFirewallsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFirewallsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFirewallsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListFirmwares returns all firmwares for a specific machine
*/
func (a *Client) ListFirmwares(params *ListFirmwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFirmwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFirmwaresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFirmwares",
		Method:             "GET",
		PathPattern:        "/v1/firmware",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFirmwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFirmwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFirmwaresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListIPs gets all ips
*/
func (a *Client) ListIPs(params *ListIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIPsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIPsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listIPs",
		Method:             "GET",
		PathPattern:        "/v1/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIPsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIPsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListIPsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListImages gets all images
*/
func (a *Client) ListImages(params *ListImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listImages",
		Method:             "GET",
		PathPattern:        "/v1/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListImagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListMachines gets all known machines
*/
func (a *Client) ListMachines(params *ListMachinesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMachinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMachines",
		Method:             "GET",
		PathPattern:        "/v1/machine",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMachinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMachinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMachinesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListNetworks gets all networks
*/
func (a *Client) ListNetworks(params *ListNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listNetworks",
		Method:             "GET",
		PathPattern:        "/v1/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListPartitions gets all partitions
*/
func (a *Client) ListPartitions(params *ListPartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPartitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPartitions",
		Method:             "GET",
		PathPattern:        "/v1/partition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPartitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPartitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPartitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListProjects gets all projects
*/
func (a *Client) ListProjects(params *ListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjects",
		Method:             "GET",
		PathPattern:        "/v1/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListSizes gets all sizes
*/
func (a *Client) ListSizes(params *ListSizesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSizesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSizesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSizes",
		Method:             "GET",
		PathPattern:        "/v1/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSizesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSizesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSizesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListSwitches gets all switches
*/
func (a *Client) ListSwitches(params *ListSwitchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSwitchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSwitchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSwitches",
		Method:             "GET",
		PathPattern:        "/v1/switch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSwitchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSwitchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSwitchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListTenants gets all tenants
*/
func (a *Client) ListTenants(params *ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTenantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTenants",
		Method:             "GET",
		PathPattern:        "/v1/tenant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTenantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTenantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTenantsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MachineBios boots machine into b i o s
*/
func (a *Client) MachineBios(params *MachineBiosParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineBiosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineBiosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "machineBios",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/power/bios",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MachineBiosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineBiosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MachineBiosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MachineCycle sends a power cycle to the machine
*/
func (a *Client) MachineCycle(params *MachineCycleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineCycleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineCycleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "machineCycle",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/power/cycle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MachineCycleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineCycleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MachineCycleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MachineDisk boots machine from disk
*/
func (a *Client) MachineDisk(params *MachineDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "machineDisk",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/power/disk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MachineDiskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MachineDiskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MachineOff sends a power off to the machine
*/
func (a *Client) MachineOff(params *MachineOffParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineOffOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineOffParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "machineOff",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/power/off",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MachineOffReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineOffOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MachineOffDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MachineOn sends a power on to the machine
*/
func (a *Client) MachineOn(params *MachineOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineOnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineOnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "machineOn",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/power/on",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MachineOnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineOnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MachineOnDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MachinePxe boots machine from p x e
*/
func (a *Client) MachinePxe(params *MachinePxeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachinePxeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinePxeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "machinePxe",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/power/pxe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MachinePxeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinePxeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MachinePxeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MachineReset sends a reset to the machine
*/
func (a *Client) MachineReset(params *MachineResetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MachineResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineResetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "machineReset",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/power/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MachineResetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachineResetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MachineResetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MatchFilesystemLayout checks if the given machine id satisfies the disk requirements of the filesystemlayout in question
*/
func (a *Client) MatchFilesystemLayout(params *MatchFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatchFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "matchFilesystemLayout",
		Method:             "POST",
		PathPattern:        "/v1/filesystemlayout/matches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MatchFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatchFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MatchFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NotifySwitch notifies the metal api about a configuration change of a switch
*/
func (a *Client) NotifySwitch(params *NotifySwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifySwitchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifySwitchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "notifySwitch",
		Method:             "POST",
		PathPattern:        "/v1/switch/{id}/notify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotifySwitchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotifySwitchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NotifySwitchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PartitionCapacity gets partition capacity
*/
func (a *Client) PartitionCapacity(params *PartitionCapacityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PartitionCapacityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartitionCapacityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "partitionCapacity",
		Method:             "POST",
		PathPattern:        "/v1/partition/capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartitionCapacityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartitionCapacityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartitionCapacityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueryImagesByID queries all images which match at least id
*/
func (a *Client) QueryImagesByID(params *QueryImagesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryImagesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryImagesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "queryImages by id",
		Method:             "GET",
		PathPattern:        "/v1/image/{id}/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueryImagesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryImagesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryImagesByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RegisterMachine registers a machine
*/
func (a *Client) RegisterMachine(params *RegisterMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterMachineOK, *RegisterMachineCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerMachine",
		Method:             "POST",
		PathPattern:        "/v1/machine/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterMachineOK:
		return value, nil, nil
	case *RegisterMachineCreated:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterMachineDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RegisterSwitch registers a switch
*/
func (a *Client) RegisterSwitch(params *RegisterSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterSwitchOK, *RegisterSwitchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterSwitchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerSwitch",
		Method:             "POST",
		PathPattern:        "/v1/switch/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterSwitchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterSwitchOK:
		return value, nil, nil
	case *RegisterSwitchCreated:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterSwitchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReinstallMachine reinstalls this machine
*/
func (a *Client) ReinstallMachine(params *ReinstallMachineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReinstallMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReinstallMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reinstallMachine",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/reinstall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReinstallMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReinstallMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReinstallMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RemoveFirmware removes given firmware
*/
func (a *Client) RemoveFirmware(params *RemoveFirmwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveFirmwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveFirmwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeFirmware",
		Method:             "DELETE",
		PathPattern:        "/v1/firmware/{kind}/{vendor}/{board}/{revision}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveFirmwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveFirmwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveFirmwareDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetChassisIdentifyLEDState sets the state of a chassis identify l e d
*/
func (a *Client) SetChassisIdentifyLEDState(params *SetChassisIdentifyLEDStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetChassisIdentifyLEDStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetChassisIdentifyLEDStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setChassisIdentifyLEDState",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/chassis-identify-led-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetChassisIdentifyLEDStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetChassisIdentifyLEDStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetChassisIdentifyLEDStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetMachineState sets the state of a machine
*/
func (a *Client) SetMachineState(params *SetMachineStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetMachineStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetMachineStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setMachineState",
		Method:             "POST",
		PathPattern:        "/v1/machine/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetMachineStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetMachineStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetMachineStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TryFilesystemLayout tries to detect a filesystemlayout based on given size and image
*/
func (a *Client) TryFilesystemLayout(params *TryFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TryFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTryFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tryFilesystemLayout",
		Method:             "POST",
		PathPattern:        "/v1/filesystemlayout/try",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TryFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TryFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TryFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateFilesystemLayout updates a filesystemlayout if the filesystemlayout was changed since this one was read a conflict is returned
*/
func (a *Client) UpdateFilesystemLayout(params *UpdateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFilesystemLayout",
		Method:             "POST",
		PathPattern:        "/v1/filesystemlayout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateFirmware sends a firmware command to the machine
*/
func (a *Client) UpdateFirmware(params *UpdateFirmwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFirmwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFirmwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFirmware",
		Method:             "POST",
		PathPattern:        "/v1/machine/update-firmware/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFirmwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFirmwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateFirmwareDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateIP updates an ip if the ip was changed since this one was read a conflict is returned
*/
func (a *Client) UpdateIP(params *UpdateIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIP",
		Method:             "POST",
		PathPattern:        "/v1/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateImage updates an image if the image was changed since this one was read a conflict is returned
*/
func (a *Client) UpdateImage(params *UpdateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateImage",
		Method:             "POST",
		PathPattern:        "/v1/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateNetwork updates a network if the network was changed since this one was read a conflict is returned
*/
func (a *Client) UpdateNetwork(params *UpdateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetwork",
		Method:             "POST",
		PathPattern:        "/v1/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdatePartition updates a partition if the partition was changed since this one was read a conflict is returned
*/
func (a *Client) UpdatePartition(params *UpdatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePartitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePartitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePartition",
		Method:             "POST",
		PathPattern:        "/v1/partition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePartitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdatePartitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateProject updates a project optimistic lock error can occur
*/
func (a *Client) UpdateProject(params *UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "POST",
		PathPattern:        "/v1/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateSize updates a size if the size was changed since this one was read a conflict is returned
*/
func (a *Client) UpdateSize(params *UpdateSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSize",
		Method:             "POST",
		PathPattern:        "/v1/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSizeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateSwitch updates a switch if the switch was changed since this one was read a conflict is returned
*/
func (a *Client) UpdateSwitch(params *UpdateSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSwitchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSwitchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSwitch",
		Method:             "POST",
		PathPattern:        "/v1/switch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSwitchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSwitchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSwitchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UploadFirmware uploads given firmware
*/
func (a *Client) UploadFirmware(params *UploadFirmwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadFirmwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadFirmwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadFirmware",
		Method:             "PUT",
		PathPattern:        "/v1/firmware/{kind}/{vendor}/{board}/{revision}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadFirmwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadFirmwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UploadFirmwareDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
