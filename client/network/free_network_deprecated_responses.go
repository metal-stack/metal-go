// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/metal-stack/metal-go/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// FreeNetworkDeprecatedReader is a Reader for the FreeNetworkDeprecated structure.
type FreeNetworkDeprecatedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FreeNetworkDeprecatedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFreeNetworkDeprecatedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewFreeNetworkDeprecatedConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewFreeNetworkDeprecatedDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFreeNetworkDeprecatedOK creates a FreeNetworkDeprecatedOK with default headers values
func NewFreeNetworkDeprecatedOK() *FreeNetworkDeprecatedOK {
	return &FreeNetworkDeprecatedOK{}
}

/* FreeNetworkDeprecatedOK describes a response with status code 200, with default header values.

OK
*/
type FreeNetworkDeprecatedOK struct {
	Payload *models.V1NetworkResponse
}

func (o *FreeNetworkDeprecatedOK) Error() string {
	return fmt.Sprintf("[POST /v1/network/free/{id}][%d] freeNetworkDeprecatedOK  %+v", 200, o.Payload)
}
func (o *FreeNetworkDeprecatedOK) GetPayload() *models.V1NetworkResponse {
	return o.Payload
}

func (o *FreeNetworkDeprecatedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1NetworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFreeNetworkDeprecatedConflict creates a FreeNetworkDeprecatedConflict with default headers values
func NewFreeNetworkDeprecatedConflict() *FreeNetworkDeprecatedConflict {
	return &FreeNetworkDeprecatedConflict{}
}

/* FreeNetworkDeprecatedConflict describes a response with status code 409, with default header values.

Conflict
*/
type FreeNetworkDeprecatedConflict struct {
	Payload *httperrors.HTTPErrorResponse
}

func (o *FreeNetworkDeprecatedConflict) Error() string {
	return fmt.Sprintf("[POST /v1/network/free/{id}][%d] freeNetworkDeprecatedConflict  %+v", 409, o.Payload)
}
func (o *FreeNetworkDeprecatedConflict) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *FreeNetworkDeprecatedConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFreeNetworkDeprecatedDefault creates a FreeNetworkDeprecatedDefault with default headers values
func NewFreeNetworkDeprecatedDefault(code int) *FreeNetworkDeprecatedDefault {
	return &FreeNetworkDeprecatedDefault{
		_statusCode: code,
	}
}

/* FreeNetworkDeprecatedDefault describes a response with status code -1, with default header values.

Error
*/
type FreeNetworkDeprecatedDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// Code gets the status code for the free network deprecated default response
func (o *FreeNetworkDeprecatedDefault) Code() int {
	return o._statusCode
}

func (o *FreeNetworkDeprecatedDefault) Error() string {
	return fmt.Sprintf("[POST /v1/network/free/{id}][%d] freeNetworkDeprecated default  %+v", o._statusCode, o.Payload)
}
func (o *FreeNetworkDeprecatedDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *FreeNetworkDeprecatedDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
