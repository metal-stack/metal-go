// Code generated by go-swagger; DO NOT EDIT.

package partition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/metal-stack/metal-go/api/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// PartitionCapacityCompatReader is a Reader for the PartitionCapacityCompat structure.
type PartitionCapacityCompatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PartitionCapacityCompatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPartitionCapacityCompatOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPartitionCapacityCompatDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPartitionCapacityCompatOK creates a PartitionCapacityCompatOK with default headers values
func NewPartitionCapacityCompatOK() *PartitionCapacityCompatOK {
	return &PartitionCapacityCompatOK{}
}

/*
	PartitionCapacityCompatOK describes a response with status code 200, with default header values.

OK
*/
type PartitionCapacityCompatOK struct {
	Payload []*models.V1PartitionCapacity
}

func (o *PartitionCapacityCompatOK) Error() string {
	return fmt.Sprintf("[GET /v1/partition/capacity][%d] partitionCapacityCompatOK  %+v", 200, o.Payload)
}
func (o *PartitionCapacityCompatOK) GetPayload() []*models.V1PartitionCapacity {
	return o.Payload
}

func (o *PartitionCapacityCompatOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartitionCapacityCompatDefault creates a PartitionCapacityCompatDefault with default headers values
func NewPartitionCapacityCompatDefault(code int) *PartitionCapacityCompatDefault {
	return &PartitionCapacityCompatDefault{
		_statusCode: code,
	}
}

/*
	PartitionCapacityCompatDefault describes a response with status code -1, with default header values.

Error
*/
type PartitionCapacityCompatDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// Code gets the status code for the partition capacity compat default response
func (o *PartitionCapacityCompatDefault) Code() int {
	return o._statusCode
}

func (o *PartitionCapacityCompatDefault) Error() string {
	return fmt.Sprintf("[GET /v1/partition/capacity][%d] partitionCapacityCompat default  %+v", o._statusCode, o.Payload)
}
func (o *PartitionCapacityCompatDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *PartitionCapacityCompatDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
