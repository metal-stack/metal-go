// Code generated by go-swagger; DO NOT EDIT.

package partition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new partition API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for partition API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePartition(params *CreatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePartitionCreated, error)

	DeletePartition(params *DeletePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePartitionOK, error)

	FindPartition(params *FindPartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPartitionOK, error)

	ListPartitions(params *ListPartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPartitionsOK, error)

	PartitionCapacity(params *PartitionCapacityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PartitionCapacityOK, error)

	UpdatePartition(params *UpdatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePartitionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePartition creates a partition if the given ID already exists a conflict is returned
*/
func (a *Client) CreatePartition(params *CreatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePartitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePartitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPartition",
		Method:             "PUT",
		PathPattern:        "/v1/partition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePartitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePartitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeletePartition deletes a partition and returns the deleted entity
*/
func (a *Client) DeletePartition(params *DeletePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePartitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePartitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePartition",
		Method:             "DELETE",
		PathPattern:        "/v1/partition/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePartitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePartitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindPartition gets partition by id
*/
func (a *Client) FindPartition(params *FindPartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPartitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPartitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPartition",
		Method:             "GET",
		PathPattern:        "/v1/partition/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindPartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPartitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindPartitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListPartitions gets all partitions
*/
func (a *Client) ListPartitions(params *ListPartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPartitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPartitions",
		Method:             "GET",
		PathPattern:        "/v1/partition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPartitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPartitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPartitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PartitionCapacity gets partition capacity
*/
func (a *Client) PartitionCapacity(params *PartitionCapacityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PartitionCapacityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartitionCapacityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "partitionCapacity",
		Method:             "GET",
		PathPattern:        "/v1/partition/capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartitionCapacityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartitionCapacityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartitionCapacityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdatePartition updates a partition if the partition was changed since this one was read a conflict is returned
*/
func (a *Client) UpdatePartition(params *UpdatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePartitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePartitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePartition",
		Method:             "POST",
		PathPattern:        "/v1/partition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePartitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdatePartitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
