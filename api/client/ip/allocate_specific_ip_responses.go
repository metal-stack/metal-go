// Code generated by go-swagger; DO NOT EDIT.

package ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/metal-stack/metal-go/api/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// AllocateSpecificIPReader is a Reader for the AllocateSpecificIP structure.
type AllocateSpecificIPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllocateSpecificIPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAllocateSpecificIPCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewAllocateSpecificIPConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAllocateSpecificIPDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAllocateSpecificIPCreated creates a AllocateSpecificIPCreated with default headers values
func NewAllocateSpecificIPCreated() *AllocateSpecificIPCreated {
	return &AllocateSpecificIPCreated{}
}

/*
AllocateSpecificIPCreated describes a response with status code 201, with default header values.

Created
*/
type AllocateSpecificIPCreated struct {
	Payload *models.V1IPResponse
}

// IsSuccess returns true when this allocate specific Ip created response has a 2xx status code
func (o *AllocateSpecificIPCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this allocate specific Ip created response has a 3xx status code
func (o *AllocateSpecificIPCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this allocate specific Ip created response has a 4xx status code
func (o *AllocateSpecificIPCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this allocate specific Ip created response has a 5xx status code
func (o *AllocateSpecificIPCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this allocate specific Ip created response a status code equal to that given
func (o *AllocateSpecificIPCreated) IsCode(code int) bool {
	return code == 201
}

func (o *AllocateSpecificIPCreated) Error() string {
	return fmt.Sprintf("[POST /v1/ip/allocate/{ip}][%d] allocateSpecificIpCreated  %+v", 201, o.Payload)
}

func (o *AllocateSpecificIPCreated) String() string {
	return fmt.Sprintf("[POST /v1/ip/allocate/{ip}][%d] allocateSpecificIpCreated  %+v", 201, o.Payload)
}

func (o *AllocateSpecificIPCreated) GetPayload() *models.V1IPResponse {
	return o.Payload
}

func (o *AllocateSpecificIPCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1IPResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateSpecificIPConflict creates a AllocateSpecificIPConflict with default headers values
func NewAllocateSpecificIPConflict() *AllocateSpecificIPConflict {
	return &AllocateSpecificIPConflict{}
}

/*
AllocateSpecificIPConflict describes a response with status code 409, with default header values.

Conflict
*/
type AllocateSpecificIPConflict struct {
	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this allocate specific Ip conflict response has a 2xx status code
func (o *AllocateSpecificIPConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this allocate specific Ip conflict response has a 3xx status code
func (o *AllocateSpecificIPConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this allocate specific Ip conflict response has a 4xx status code
func (o *AllocateSpecificIPConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this allocate specific Ip conflict response has a 5xx status code
func (o *AllocateSpecificIPConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this allocate specific Ip conflict response a status code equal to that given
func (o *AllocateSpecificIPConflict) IsCode(code int) bool {
	return code == 409
}

func (o *AllocateSpecificIPConflict) Error() string {
	return fmt.Sprintf("[POST /v1/ip/allocate/{ip}][%d] allocateSpecificIpConflict  %+v", 409, o.Payload)
}

func (o *AllocateSpecificIPConflict) String() string {
	return fmt.Sprintf("[POST /v1/ip/allocate/{ip}][%d] allocateSpecificIpConflict  %+v", 409, o.Payload)
}

func (o *AllocateSpecificIPConflict) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *AllocateSpecificIPConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateSpecificIPDefault creates a AllocateSpecificIPDefault with default headers values
func NewAllocateSpecificIPDefault(code int) *AllocateSpecificIPDefault {
	return &AllocateSpecificIPDefault{
		_statusCode: code,
	}
}

/*
AllocateSpecificIPDefault describes a response with status code -1, with default header values.

Error
*/
type AllocateSpecificIPDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// Code gets the status code for the allocate specific IP default response
func (o *AllocateSpecificIPDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this allocate specific IP default response has a 2xx status code
func (o *AllocateSpecificIPDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this allocate specific IP default response has a 3xx status code
func (o *AllocateSpecificIPDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this allocate specific IP default response has a 4xx status code
func (o *AllocateSpecificIPDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this allocate specific IP default response has a 5xx status code
func (o *AllocateSpecificIPDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this allocate specific IP default response a status code equal to that given
func (o *AllocateSpecificIPDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *AllocateSpecificIPDefault) Error() string {
	return fmt.Sprintf("[POST /v1/ip/allocate/{ip}][%d] allocateSpecificIP default  %+v", o._statusCode, o.Payload)
}

func (o *AllocateSpecificIPDefault) String() string {
	return fmt.Sprintf("[POST /v1/ip/allocate/{ip}][%d] allocateSpecificIP default  %+v", o._statusCode, o.Payload)
}

func (o *AllocateSpecificIPDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *AllocateSpecificIPDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
