// Code generated by go-swagger; DO NOT EDIT.

package size

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/metal-stack/metal-go/api/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// CreateSizeReservationReader is a Reader for the CreateSizeReservation structure.
type CreateSizeReservationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSizeReservationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateSizeReservationCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewCreateSizeReservationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateSizeReservationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateSizeReservationCreated creates a CreateSizeReservationCreated with default headers values
func NewCreateSizeReservationCreated() *CreateSizeReservationCreated {
	return &CreateSizeReservationCreated{}
}

/*
CreateSizeReservationCreated describes a response with status code 201, with default header values.

Created
*/
type CreateSizeReservationCreated struct {
	Payload *models.V1SizeReservationResponse
}

// IsSuccess returns true when this create size reservation created response has a 2xx status code
func (o *CreateSizeReservationCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create size reservation created response has a 3xx status code
func (o *CreateSizeReservationCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create size reservation created response has a 4xx status code
func (o *CreateSizeReservationCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create size reservation created response has a 5xx status code
func (o *CreateSizeReservationCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create size reservation created response a status code equal to that given
func (o *CreateSizeReservationCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create size reservation created response
func (o *CreateSizeReservationCreated) Code() int {
	return 201
}

func (o *CreateSizeReservationCreated) Error() string {
	return fmt.Sprintf("[PUT /v1/size/reservations][%d] createSizeReservationCreated  %+v", 201, o.Payload)
}

func (o *CreateSizeReservationCreated) String() string {
	return fmt.Sprintf("[PUT /v1/size/reservations][%d] createSizeReservationCreated  %+v", 201, o.Payload)
}

func (o *CreateSizeReservationCreated) GetPayload() *models.V1SizeReservationResponse {
	return o.Payload
}

func (o *CreateSizeReservationCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1SizeReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSizeReservationConflict creates a CreateSizeReservationConflict with default headers values
func NewCreateSizeReservationConflict() *CreateSizeReservationConflict {
	return &CreateSizeReservationConflict{}
}

/*
CreateSizeReservationConflict describes a response with status code 409, with default header values.

Conflict
*/
type CreateSizeReservationConflict struct {
	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this create size reservation conflict response has a 2xx status code
func (o *CreateSizeReservationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create size reservation conflict response has a 3xx status code
func (o *CreateSizeReservationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create size reservation conflict response has a 4xx status code
func (o *CreateSizeReservationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create size reservation conflict response has a 5xx status code
func (o *CreateSizeReservationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create size reservation conflict response a status code equal to that given
func (o *CreateSizeReservationConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create size reservation conflict response
func (o *CreateSizeReservationConflict) Code() int {
	return 409
}

func (o *CreateSizeReservationConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/size/reservations][%d] createSizeReservationConflict  %+v", 409, o.Payload)
}

func (o *CreateSizeReservationConflict) String() string {
	return fmt.Sprintf("[PUT /v1/size/reservations][%d] createSizeReservationConflict  %+v", 409, o.Payload)
}

func (o *CreateSizeReservationConflict) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *CreateSizeReservationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSizeReservationDefault creates a CreateSizeReservationDefault with default headers values
func NewCreateSizeReservationDefault(code int) *CreateSizeReservationDefault {
	return &CreateSizeReservationDefault{
		_statusCode: code,
	}
}

/*
CreateSizeReservationDefault describes a response with status code -1, with default header values.

Error
*/
type CreateSizeReservationDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this create size reservation default response has a 2xx status code
func (o *CreateSizeReservationDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create size reservation default response has a 3xx status code
func (o *CreateSizeReservationDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create size reservation default response has a 4xx status code
func (o *CreateSizeReservationDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create size reservation default response has a 5xx status code
func (o *CreateSizeReservationDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create size reservation default response a status code equal to that given
func (o *CreateSizeReservationDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create size reservation default response
func (o *CreateSizeReservationDefault) Code() int {
	return o._statusCode
}

func (o *CreateSizeReservationDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/size/reservations][%d] createSizeReservation default  %+v", o._statusCode, o.Payload)
}

func (o *CreateSizeReservationDefault) String() string {
	return fmt.Sprintf("[PUT /v1/size/reservations][%d] createSizeReservation default  %+v", o._statusCode, o.Payload)
}

func (o *CreateSizeReservationDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *CreateSizeReservationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
