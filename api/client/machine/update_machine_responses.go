// Code generated by go-swagger; DO NOT EDIT.

package machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/metal-stack/metal-go/api/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// UpdateMachineReader is a Reader for the UpdateMachine structure.
type UpdateMachineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMachineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMachineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewUpdateMachineConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateMachineDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateMachineOK creates a UpdateMachineOK with default headers values
func NewUpdateMachineOK() *UpdateMachineOK {
	return &UpdateMachineOK{}
}

/*
UpdateMachineOK describes a response with status code 200, with default header values.

OK
*/
type UpdateMachineOK struct {
	Payload *models.V1MachineResponse
}

// IsSuccess returns true when this update machine o k response has a 2xx status code
func (o *UpdateMachineOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update machine o k response has a 3xx status code
func (o *UpdateMachineOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update machine o k response has a 4xx status code
func (o *UpdateMachineOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update machine o k response has a 5xx status code
func (o *UpdateMachineOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update machine o k response a status code equal to that given
func (o *UpdateMachineOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateMachineOK) Error() string {
	return fmt.Sprintf("[POST /v1/machine][%d] updateMachineOK  %+v", 200, o.Payload)
}

func (o *UpdateMachineOK) String() string {
	return fmt.Sprintf("[POST /v1/machine][%d] updateMachineOK  %+v", 200, o.Payload)
}

func (o *UpdateMachineOK) GetPayload() *models.V1MachineResponse {
	return o.Payload
}

func (o *UpdateMachineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1MachineResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMachineConflict creates a UpdateMachineConflict with default headers values
func NewUpdateMachineConflict() *UpdateMachineConflict {
	return &UpdateMachineConflict{}
}

/*
UpdateMachineConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateMachineConflict struct {
	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this update machine conflict response has a 2xx status code
func (o *UpdateMachineConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update machine conflict response has a 3xx status code
func (o *UpdateMachineConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update machine conflict response has a 4xx status code
func (o *UpdateMachineConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update machine conflict response has a 5xx status code
func (o *UpdateMachineConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update machine conflict response a status code equal to that given
func (o *UpdateMachineConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateMachineConflict) Error() string {
	return fmt.Sprintf("[POST /v1/machine][%d] updateMachineConflict  %+v", 409, o.Payload)
}

func (o *UpdateMachineConflict) String() string {
	return fmt.Sprintf("[POST /v1/machine][%d] updateMachineConflict  %+v", 409, o.Payload)
}

func (o *UpdateMachineConflict) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *UpdateMachineConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMachineDefault creates a UpdateMachineDefault with default headers values
func NewUpdateMachineDefault(code int) *UpdateMachineDefault {
	return &UpdateMachineDefault{
		_statusCode: code,
	}
}

/*
UpdateMachineDefault describes a response with status code -1, with default header values.

Error
*/
type UpdateMachineDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// Code gets the status code for the update machine default response
func (o *UpdateMachineDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this update machine default response has a 2xx status code
func (o *UpdateMachineDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update machine default response has a 3xx status code
func (o *UpdateMachineDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update machine default response has a 4xx status code
func (o *UpdateMachineDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update machine default response has a 5xx status code
func (o *UpdateMachineDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update machine default response a status code equal to that given
func (o *UpdateMachineDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *UpdateMachineDefault) Error() string {
	return fmt.Sprintf("[POST /v1/machine][%d] updateMachine default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateMachineDefault) String() string {
	return fmt.Sprintf("[POST /v1/machine][%d] updateMachine default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateMachineDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *UpdateMachineDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
