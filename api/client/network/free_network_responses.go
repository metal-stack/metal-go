// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/metal-stack/metal-go/api/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// FreeNetworkReader is a Reader for the FreeNetwork structure.
type FreeNetworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FreeNetworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFreeNetworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewFreeNetworkConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewFreeNetworkDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFreeNetworkOK creates a FreeNetworkOK with default headers values
func NewFreeNetworkOK() *FreeNetworkOK {
	return &FreeNetworkOK{}
}

/*
FreeNetworkOK describes a response with status code 200, with default header values.

OK
*/
type FreeNetworkOK struct {
	Payload *models.V1NetworkResponse
}

// IsSuccess returns true when this free network o k response has a 2xx status code
func (o *FreeNetworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this free network o k response has a 3xx status code
func (o *FreeNetworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this free network o k response has a 4xx status code
func (o *FreeNetworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this free network o k response has a 5xx status code
func (o *FreeNetworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this free network o k response a status code equal to that given
func (o *FreeNetworkOK) IsCode(code int) bool {
	return code == 200
}

func (o *FreeNetworkOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/network/free/{id}][%d] freeNetworkOK  %+v", 200, o.Payload)
}

func (o *FreeNetworkOK) String() string {
	return fmt.Sprintf("[DELETE /v1/network/free/{id}][%d] freeNetworkOK  %+v", 200, o.Payload)
}

func (o *FreeNetworkOK) GetPayload() *models.V1NetworkResponse {
	return o.Payload
}

func (o *FreeNetworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1NetworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFreeNetworkConflict creates a FreeNetworkConflict with default headers values
func NewFreeNetworkConflict() *FreeNetworkConflict {
	return &FreeNetworkConflict{}
}

/*
FreeNetworkConflict describes a response with status code 409, with default header values.

Conflict
*/
type FreeNetworkConflict struct {
	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this free network conflict response has a 2xx status code
func (o *FreeNetworkConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this free network conflict response has a 3xx status code
func (o *FreeNetworkConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this free network conflict response has a 4xx status code
func (o *FreeNetworkConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this free network conflict response has a 5xx status code
func (o *FreeNetworkConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this free network conflict response a status code equal to that given
func (o *FreeNetworkConflict) IsCode(code int) bool {
	return code == 409
}

func (o *FreeNetworkConflict) Error() string {
	return fmt.Sprintf("[DELETE /v1/network/free/{id}][%d] freeNetworkConflict  %+v", 409, o.Payload)
}

func (o *FreeNetworkConflict) String() string {
	return fmt.Sprintf("[DELETE /v1/network/free/{id}][%d] freeNetworkConflict  %+v", 409, o.Payload)
}

func (o *FreeNetworkConflict) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *FreeNetworkConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFreeNetworkDefault creates a FreeNetworkDefault with default headers values
func NewFreeNetworkDefault(code int) *FreeNetworkDefault {
	return &FreeNetworkDefault{
		_statusCode: code,
	}
}

/*
FreeNetworkDefault describes a response with status code -1, with default header values.

Error
*/
type FreeNetworkDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// Code gets the status code for the free network default response
func (o *FreeNetworkDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this free network default response has a 2xx status code
func (o *FreeNetworkDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this free network default response has a 3xx status code
func (o *FreeNetworkDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this free network default response has a 4xx status code
func (o *FreeNetworkDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this free network default response has a 5xx status code
func (o *FreeNetworkDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this free network default response a status code equal to that given
func (o *FreeNetworkDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *FreeNetworkDefault) Error() string {
	return fmt.Sprintf("[DELETE /v1/network/free/{id}][%d] freeNetwork default  %+v", o._statusCode, o.Payload)
}

func (o *FreeNetworkDefault) String() string {
	return fmt.Sprintf("[DELETE /v1/network/free/{id}][%d] freeNetwork default  %+v", o._statusCode, o.Payload)
}

func (o *FreeNetworkDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *FreeNetworkDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
