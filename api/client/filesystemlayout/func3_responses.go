// Code generated by go-swagger; DO NOT EDIT.

package filesystemlayout

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/metal-stack/metal-go/api/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// Func3Reader is a Reader for the Func3 structure.
type Func3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Func3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFunc3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewFunc3Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewFunc3Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFunc3OK creates a Func3OK with default headers values
func NewFunc3OK() *Func3OK {
	return &Func3OK{}
}

/* Func3OK describes a response with status code 200, with default header values.

OK
*/
type Func3OK struct {
	Payload *models.V1FilesystemLayoutResponse
}

func (o *Func3OK) Error() string {
	return fmt.Sprintf("[POST /v1/filesystemlayout][%d] func3OK  %+v", 200, o.Payload)
}
func (o *Func3OK) GetPayload() *models.V1FilesystemLayoutResponse {
	return o.Payload
}

func (o *Func3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1FilesystemLayoutResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFunc3Conflict creates a Func3Conflict with default headers values
func NewFunc3Conflict() *Func3Conflict {
	return &Func3Conflict{}
}

/* Func3Conflict describes a response with status code 409, with default header values.

Conflict
*/
type Func3Conflict struct {
	Payload *httperrors.HTTPErrorResponse
}

func (o *Func3Conflict) Error() string {
	return fmt.Sprintf("[POST /v1/filesystemlayout][%d] func3Conflict  %+v", 409, o.Payload)
}
func (o *Func3Conflict) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *Func3Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFunc3Default creates a Func3Default with default headers values
func NewFunc3Default(code int) *Func3Default {
	return &Func3Default{
		_statusCode: code,
	}
}

/* Func3Default describes a response with status code -1, with default header values.

Error
*/
type Func3Default struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// Code gets the status code for the func3 default response
func (o *Func3Default) Code() int {
	return o._statusCode
}

func (o *Func3Default) Error() string {
	return fmt.Sprintf("[POST /v1/filesystemlayout][%d] func3 default  %+v", o._statusCode, o.Payload)
}
func (o *Func3Default) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *Func3Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
