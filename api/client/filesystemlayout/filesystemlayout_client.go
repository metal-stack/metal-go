// Code generated by go-swagger; DO NOT EDIT.

package filesystemlayout

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new filesystemlayout API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for filesystemlayout API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFilesystemLayout(params *CreateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilesystemLayoutCreated, error)

	DeleteFilesystemLayout(params *DeleteFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilesystemLayoutOK, error)

	GetFilesystemLayout(params *GetFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilesystemLayoutOK, error)

	ListFilesystemLayouts(params *ListFilesystemLayoutsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFilesystemLayoutsOK, error)

	MatchFilesystemLayout(params *MatchFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchFilesystemLayoutOK, error)

	TryFilesystemLayout(params *TryFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TryFilesystemLayoutOK, error)

	UpdateFilesystemLayout(params *UpdateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFilesystemLayoutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateFilesystemLayout creates a filesystemlayout if the given ID already exists a conflict is returned
*/
func (a *Client) CreateFilesystemLayout(params *CreateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilesystemLayoutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFilesystemLayout",
		Method:             "PUT",
		PathPattern:        "/v1/filesystemlayout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFilesystemLayoutCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteFilesystemLayout deletes an filesystemlayout and returns the deleted entity
*/
func (a *Client) DeleteFilesystemLayout(params *DeleteFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFilesystemLayout",
		Method:             "DELETE",
		PathPattern:        "/v1/filesystemlayout/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFilesystemLayout gets filesystemlayout by id
*/
func (a *Client) GetFilesystemLayout(params *GetFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilesystemLayout",
		Method:             "GET",
		PathPattern:        "/v1/filesystemlayout/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListFilesystemLayouts gets all filesystemlayouts
*/
func (a *Client) ListFilesystemLayouts(params *ListFilesystemLayoutsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFilesystemLayoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFilesystemLayoutsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFilesystemLayouts",
		Method:             "GET",
		PathPattern:        "/v1/filesystemlayout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFilesystemLayoutsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFilesystemLayoutsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFilesystemLayoutsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MatchFilesystemLayout checks if the given machine id satisfies the disk requirements of the filesystemlayout in question
*/
func (a *Client) MatchFilesystemLayout(params *MatchFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatchFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "matchFilesystemLayout",
		Method:             "POST",
		PathPattern:        "/v1/filesystemlayout/matches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MatchFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatchFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MatchFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TryFilesystemLayout tries to detect a filesystemlayout based on given size and image
*/
func (a *Client) TryFilesystemLayout(params *TryFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TryFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTryFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tryFilesystemLayout",
		Method:             "POST",
		PathPattern:        "/v1/filesystemlayout/try",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TryFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TryFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TryFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateFilesystemLayout updates a filesystemlayout if the filesystemlayout was changed since this one was read a conflict is returned
*/
func (a *Client) UpdateFilesystemLayout(params *UpdateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFilesystemLayout",
		Method:             "POST",
		PathPattern:        "/v1/filesystemlayout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
