// Code generated by go-swagger; DO NOT EDIT.

package filesystemlayout

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new filesystemlayout API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for filesystemlayout API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FindFilesystemLayout(params *FindFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFilesystemLayoutOK, error)

	Func1(params *Func1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Func1OK, error)

	Func2(params *Func2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Func2Created, error)

	Func3(params *Func3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Func3OK, error)

	ListFilesystemLayouts(params *ListFilesystemLayoutsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFilesystemLayoutsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  FindFilesystemLayout gets filesystemlayout by id
*/
func (a *Client) FindFilesystemLayout(params *FindFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFilesystemLayoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindFilesystemLayoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findFilesystemLayout",
		Method:             "GET",
		PathPattern:        "/v1/filesystemlayout/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindFilesystemLayoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindFilesystemLayoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindFilesystemLayoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Func1 deletes an filesystemlayout and returns the deleted entity
*/
func (a *Client) Func1(params *Func1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Func1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunc1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "func1",
		Method:             "DELETE",
		PathPattern:        "/v1/filesystemlayout/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &Func1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Func1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*Func1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Func2 creates a filesystemlayout if the given ID already exists a conflict is returned
*/
func (a *Client) Func2(params *Func2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Func2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunc2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "func2",
		Method:             "PUT",
		PathPattern:        "/v1/filesystemlayout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &Func2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Func2Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*Func2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Func3 updates a filesystemlayout if the filesystemlayout was changed since this one was read a conflict is returned
*/
func (a *Client) Func3(params *Func3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Func3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFunc3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "func3",
		Method:             "POST",
		PathPattern:        "/v1/filesystemlayout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &Func3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Func3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*Func3Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListFilesystemLayouts gets all filesystemlayouts
*/
func (a *Client) ListFilesystemLayouts(params *ListFilesystemLayoutsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFilesystemLayoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFilesystemLayoutsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFilesystemLayouts",
		Method:             "GET",
		PathPattern:        "/v1/filesystemlayout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFilesystemLayoutsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFilesystemLayoutsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFilesystemLayoutsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
