// Code generated by go-swagger; DO NOT EDIT.

package firmware

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListFirmwaresParams creates a new ListFirmwaresParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListFirmwaresParams() *ListFirmwaresParams {
	return &ListFirmwaresParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListFirmwaresParamsWithTimeout creates a new ListFirmwaresParams object
// with the ability to set a timeout on a request.
func NewListFirmwaresParamsWithTimeout(timeout time.Duration) *ListFirmwaresParams {
	return &ListFirmwaresParams{
		timeout: timeout,
	}
}

// NewListFirmwaresParamsWithContext creates a new ListFirmwaresParams object
// with the ability to set a context for a request.
func NewListFirmwaresParamsWithContext(ctx context.Context) *ListFirmwaresParams {
	return &ListFirmwaresParams{
		Context: ctx,
	}
}

// NewListFirmwaresParamsWithHTTPClient creates a new ListFirmwaresParams object
// with the ability to set a custom HTTPClient for a request.
func NewListFirmwaresParamsWithHTTPClient(client *http.Client) *ListFirmwaresParams {
	return &ListFirmwaresParams{
		HTTPClient: client,
	}
}

/* ListFirmwaresParams contains all the parameters to send to the API endpoint
   for the list firmwares operation.

   Typically these are written to a http.Request.
*/
type ListFirmwaresParams struct {

	/* Board.

	   the board
	*/
	Board *string

	/* Kind.

	   the firmware kind [bios|bmc]
	*/
	Kind *string

	/* MachineID.

	   restrict firmwares to the given machine
	*/
	MachineID *string

	/* Vendor.

	   the vendor
	*/
	Vendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list firmwares params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListFirmwaresParams) WithDefaults() *ListFirmwaresParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list firmwares params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListFirmwaresParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list firmwares params
func (o *ListFirmwaresParams) WithTimeout(timeout time.Duration) *ListFirmwaresParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list firmwares params
func (o *ListFirmwaresParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list firmwares params
func (o *ListFirmwaresParams) WithContext(ctx context.Context) *ListFirmwaresParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list firmwares params
func (o *ListFirmwaresParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list firmwares params
func (o *ListFirmwaresParams) WithHTTPClient(client *http.Client) *ListFirmwaresParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list firmwares params
func (o *ListFirmwaresParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBoard adds the board to the list firmwares params
func (o *ListFirmwaresParams) WithBoard(board *string) *ListFirmwaresParams {
	o.SetBoard(board)
	return o
}

// SetBoard adds the board to the list firmwares params
func (o *ListFirmwaresParams) SetBoard(board *string) {
	o.Board = board
}

// WithKind adds the kind to the list firmwares params
func (o *ListFirmwaresParams) WithKind(kind *string) *ListFirmwaresParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the list firmwares params
func (o *ListFirmwaresParams) SetKind(kind *string) {
	o.Kind = kind
}

// WithMachineID adds the machineID to the list firmwares params
func (o *ListFirmwaresParams) WithMachineID(machineID *string) *ListFirmwaresParams {
	o.SetMachineID(machineID)
	return o
}

// SetMachineID adds the machineId to the list firmwares params
func (o *ListFirmwaresParams) SetMachineID(machineID *string) {
	o.MachineID = machineID
}

// WithVendor adds the vendor to the list firmwares params
func (o *ListFirmwaresParams) WithVendor(vendor *string) *ListFirmwaresParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the list firmwares params
func (o *ListFirmwaresParams) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *ListFirmwaresParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Board != nil {

		// query param board
		var qrBoard string

		if o.Board != nil {
			qrBoard = *o.Board
		}
		qBoard := qrBoard
		if qBoard != "" {

			if err := r.SetQueryParam("board", qBoard); err != nil {
				return err
			}
		}
	}

	if o.Kind != nil {

		// query param kind
		var qrKind string

		if o.Kind != nil {
			qrKind = *o.Kind
		}
		qKind := qrKind
		if qKind != "" {

			if err := r.SetQueryParam("kind", qKind); err != nil {
				return err
			}
		}
	}

	if o.MachineID != nil {

		// query param machine-id
		var qrMachineID string

		if o.MachineID != nil {
			qrMachineID = *o.MachineID
		}
		qMachineID := qrMachineID
		if qMachineID != "" {

			if err := r.SetQueryParam("machine-id", qMachineID); err != nil {
				return err
			}
		}
	}

	if o.Vendor != nil {

		// query param vendor
		var qrVendor string

		if o.Vendor != nil {
			qrVendor = *o.Vendor
		}
		qVendor := qrVendor
		if qVendor != "" {

			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
