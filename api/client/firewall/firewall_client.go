// Code generated by go-swagger; DO NOT EDIT.

package firewall

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new firewall API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for firewall API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AllocateFirewall(params *AllocateFirewallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateFirewallOK, error)

	FindFirewall(params *FindFirewallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFirewallOK, error)

	FindFirewalls(params *FindFirewallsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFirewallsOK, error)

	ListFirewalls(params *ListFirewallsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFirewallsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AllocateFirewall allocates a firewall
*/
func (a *Client) AllocateFirewall(params *AllocateFirewallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllocateFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllocateFirewallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "allocateFirewall",
		Method:             "POST",
		PathPattern:        "/v1/firewall/allocate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllocateFirewallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllocateFirewallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllocateFirewallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindFirewall gets firewall by id
*/
func (a *Client) FindFirewall(params *FindFirewallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindFirewallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findFirewall",
		Method:             "GET",
		PathPattern:        "/v1/firewall/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindFirewallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindFirewallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindFirewallDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FindFirewalls finds firewalls by multiple criteria
*/
func (a *Client) FindFirewalls(params *FindFirewallsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindFirewallsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindFirewallsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findFirewalls",
		Method:             "POST",
		PathPattern:        "/v1/firewall/find",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindFirewallsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindFirewallsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FindFirewallsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListFirewalls gets all known firewalls
*/
func (a *Client) ListFirewalls(params *ListFirewallsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFirewallsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFirewallsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFirewalls",
		Method:             "GET",
		PathPattern:        "/v1/firewall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFirewallsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFirewallsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFirewallsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
