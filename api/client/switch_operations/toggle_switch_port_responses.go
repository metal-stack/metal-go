// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/metal-stack/metal-go/api/models"
	"github.com/metal-stack/metal-lib/httperrors"
)

// ToggleSwitchPortReader is a Reader for the ToggleSwitchPort structure.
type ToggleSwitchPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ToggleSwitchPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewToggleSwitchPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewToggleSwitchPortBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewToggleSwitchPortConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewToggleSwitchPortDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewToggleSwitchPortOK creates a ToggleSwitchPortOK with default headers values
func NewToggleSwitchPortOK() *ToggleSwitchPortOK {
	return &ToggleSwitchPortOK{}
}

/*
ToggleSwitchPortOK describes a response with status code 200, with default header values.

OK
*/
type ToggleSwitchPortOK struct {
	Payload *models.V1SwitchResponse
}

// IsSuccess returns true when this toggle switch port o k response has a 2xx status code
func (o *ToggleSwitchPortOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this toggle switch port o k response has a 3xx status code
func (o *ToggleSwitchPortOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle switch port o k response has a 4xx status code
func (o *ToggleSwitchPortOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this toggle switch port o k response has a 5xx status code
func (o *ToggleSwitchPortOK) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle switch port o k response a status code equal to that given
func (o *ToggleSwitchPortOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the toggle switch port o k response
func (o *ToggleSwitchPortOK) Code() int {
	return 200
}

func (o *ToggleSwitchPortOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/switch/{id}/port][%d] toggleSwitchPortOK %s", 200, payload)
}

func (o *ToggleSwitchPortOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/switch/{id}/port][%d] toggleSwitchPortOK %s", 200, payload)
}

func (o *ToggleSwitchPortOK) GetPayload() *models.V1SwitchResponse {
	return o.Payload
}

func (o *ToggleSwitchPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1SwitchResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewToggleSwitchPortBadRequest creates a ToggleSwitchPortBadRequest with default headers values
func NewToggleSwitchPortBadRequest() *ToggleSwitchPortBadRequest {
	return &ToggleSwitchPortBadRequest{}
}

/*
ToggleSwitchPortBadRequest describes a response with status code 400, with default header values.

Bad input data
*/
type ToggleSwitchPortBadRequest struct {
	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this toggle switch port bad request response has a 2xx status code
func (o *ToggleSwitchPortBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this toggle switch port bad request response has a 3xx status code
func (o *ToggleSwitchPortBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle switch port bad request response has a 4xx status code
func (o *ToggleSwitchPortBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this toggle switch port bad request response has a 5xx status code
func (o *ToggleSwitchPortBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle switch port bad request response a status code equal to that given
func (o *ToggleSwitchPortBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the toggle switch port bad request response
func (o *ToggleSwitchPortBadRequest) Code() int {
	return 400
}

func (o *ToggleSwitchPortBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/switch/{id}/port][%d] toggleSwitchPortBadRequest %s", 400, payload)
}

func (o *ToggleSwitchPortBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/switch/{id}/port][%d] toggleSwitchPortBadRequest %s", 400, payload)
}

func (o *ToggleSwitchPortBadRequest) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *ToggleSwitchPortBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewToggleSwitchPortConflict creates a ToggleSwitchPortConflict with default headers values
func NewToggleSwitchPortConflict() *ToggleSwitchPortConflict {
	return &ToggleSwitchPortConflict{}
}

/*
ToggleSwitchPortConflict describes a response with status code 409, with default header values.

Conflict
*/
type ToggleSwitchPortConflict struct {
	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this toggle switch port conflict response has a 2xx status code
func (o *ToggleSwitchPortConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this toggle switch port conflict response has a 3xx status code
func (o *ToggleSwitchPortConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle switch port conflict response has a 4xx status code
func (o *ToggleSwitchPortConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this toggle switch port conflict response has a 5xx status code
func (o *ToggleSwitchPortConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle switch port conflict response a status code equal to that given
func (o *ToggleSwitchPortConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the toggle switch port conflict response
func (o *ToggleSwitchPortConflict) Code() int {
	return 409
}

func (o *ToggleSwitchPortConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/switch/{id}/port][%d] toggleSwitchPortConflict %s", 409, payload)
}

func (o *ToggleSwitchPortConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/switch/{id}/port][%d] toggleSwitchPortConflict %s", 409, payload)
}

func (o *ToggleSwitchPortConflict) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *ToggleSwitchPortConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewToggleSwitchPortDefault creates a ToggleSwitchPortDefault with default headers values
func NewToggleSwitchPortDefault(code int) *ToggleSwitchPortDefault {
	return &ToggleSwitchPortDefault{
		_statusCode: code,
	}
}

/*
ToggleSwitchPortDefault describes a response with status code -1, with default header values.

Error
*/
type ToggleSwitchPortDefault struct {
	_statusCode int

	Payload *httperrors.HTTPErrorResponse
}

// IsSuccess returns true when this toggle switch port default response has a 2xx status code
func (o *ToggleSwitchPortDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this toggle switch port default response has a 3xx status code
func (o *ToggleSwitchPortDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this toggle switch port default response has a 4xx status code
func (o *ToggleSwitchPortDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this toggle switch port default response has a 5xx status code
func (o *ToggleSwitchPortDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this toggle switch port default response a status code equal to that given
func (o *ToggleSwitchPortDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the toggle switch port default response
func (o *ToggleSwitchPortDefault) Code() int {
	return o._statusCode
}

func (o *ToggleSwitchPortDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/switch/{id}/port][%d] toggleSwitchPort default %s", o._statusCode, payload)
}

func (o *ToggleSwitchPortDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/switch/{id}/port][%d] toggleSwitchPort default %s", o._statusCode, payload)
}

func (o *ToggleSwitchPortDefault) GetPayload() *httperrors.HTTPErrorResponse {
	return o.Payload
}

func (o *ToggleSwitchPortDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(httperrors.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
