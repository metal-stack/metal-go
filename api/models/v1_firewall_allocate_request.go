// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1FirewallAllocateRequest v1 firewall allocate request
//
// swagger:model v1.FirewallAllocateRequest
type V1FirewallAllocateRequest struct {

	// optional egress and ingress firewall rules to deploy during firewall allocation
	FirewallRules *V1FirewallRules `json:"firewall_rules,omitempty" yaml:"firewall_rules,omitempty"`
}

// Validate validates this v1 firewall allocate request
func (m *V1FirewallAllocateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirewallRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1FirewallAllocateRequest) validateFirewallRules(formats strfmt.Registry) error {
	if swag.IsZero(m.FirewallRules) { // not required
		return nil
	}

	if m.FirewallRules != nil {
		if err := m.FirewallRules.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firewall_rules")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firewall_rules")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 firewall allocate request based on the context it is used
func (m *V1FirewallAllocateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFirewallRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1FirewallAllocateRequest) contextValidateFirewallRules(ctx context.Context, formats strfmt.Registry) error {

	if m.FirewallRules != nil {

		if swag.IsZero(m.FirewallRules) { // not required
			return nil
		}

		if err := m.FirewallRules.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firewall_rules")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firewall_rules")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1FirewallAllocateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1FirewallAllocateRequest) UnmarshalBinary(b []byte) error {
	var res V1FirewallAllocateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
