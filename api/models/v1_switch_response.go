// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SwitchResponse v1 switch response
//
// swagger:model v1.SwitchResponse
type V1SwitchResponse struct {

	// the last changed timestamp of this entity
	// Read Only: true
	// Format: date-time
	Changed strfmt.DateTime `json:"changed,omitempty"`

	// a connection between a switch port and a machine
	// Required: true
	Connections []*V1SwitchConnection `json:"connections"`

	// the creation time of this entity
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// a description for this entity
	Description string `json:"description,omitempty"`

	// the unique ID of this entity
	// Required: true
	ID *string `json:"id"`

	// last successful synchronization to the switch
	LastSync *V1SwitchSync `json:"last_sync,omitempty"`

	// last synchronization to the switch that was erroneous
	LastSyncError *V1SwitchSync `json:"last_sync_error,omitempty"`

	// the mode the switch currently has
	Mode string `json:"mode,omitempty"`

	// a readable name for this entity
	Name string `json:"name,omitempty"`

	// the list of network interfaces on the switch
	// Required: true
	Nics []*V1SwitchNic `json:"nics"`

	// the partition in which this switch is located
	// Required: true
	Partition *V1PartitionResponse `json:"partition"`

	// the id of the rack in which this switch is located
	// Required: true
	RackID *string `json:"rack_id"`
}

// Validate validates this v1 switch response
func (m *V1SwitchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSync(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSyncError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRackID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SwitchResponse) validateChanged(formats strfmt.Registry) error {
	if swag.IsZero(m.Changed) { // not required
		return nil
	}

	if err := validate.FormatOf("changed", "body", "date-time", m.Changed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1SwitchResponse) validateConnections(formats strfmt.Registry) error {

	if err := validate.Required("connections", "body", m.Connections); err != nil {
		return err
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SwitchResponse) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1SwitchResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1SwitchResponse) validateLastSync(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSync) { // not required
		return nil
	}

	if m.LastSync != nil {
		if err := m.LastSync.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_sync")
			}
			return err
		}
	}

	return nil
}

func (m *V1SwitchResponse) validateLastSyncError(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSyncError) { // not required
		return nil
	}

	if m.LastSyncError != nil {
		if err := m.LastSyncError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_sync_error")
			}
			return err
		}
	}

	return nil
}

func (m *V1SwitchResponse) validateNics(formats strfmt.Registry) error {

	if err := validate.Required("nics", "body", m.Nics); err != nil {
		return err
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SwitchResponse) validatePartition(formats strfmt.Registry) error {

	if err := validate.Required("partition", "body", m.Partition); err != nil {
		return err
	}

	if m.Partition != nil {
		if err := m.Partition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partition")
			}
			return err
		}
	}

	return nil
}

func (m *V1SwitchResponse) validateRackID(formats strfmt.Registry) error {

	if err := validate.Required("rack_id", "body", m.RackID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 switch response based on the context it is used
func (m *V1SwitchResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChanged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastSync(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastSyncError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SwitchResponse) contextValidateChanged(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "changed", "body", strfmt.DateTime(m.Changed)); err != nil {
		return err
	}

	return nil
}

func (m *V1SwitchResponse) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {
			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SwitchResponse) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	return nil
}

func (m *V1SwitchResponse) contextValidateLastSync(ctx context.Context, formats strfmt.Registry) error {

	if m.LastSync != nil {
		if err := m.LastSync.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_sync")
			}
			return err
		}
	}

	return nil
}

func (m *V1SwitchResponse) contextValidateLastSyncError(ctx context.Context, formats strfmt.Registry) error {

	if m.LastSyncError != nil {
		if err := m.LastSyncError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_sync_error")
			}
			return err
		}
	}

	return nil
}

func (m *V1SwitchResponse) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nics); i++ {

		if m.Nics[i] != nil {
			if err := m.Nics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SwitchResponse) contextValidatePartition(ctx context.Context, formats strfmt.Registry) error {

	if m.Partition != nil {
		if err := m.Partition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SwitchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SwitchResponse) UnmarshalBinary(b []byte) error {
	var res V1SwitchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
