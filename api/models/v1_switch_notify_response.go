// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SwitchNotifyResponse v1 switch notify response
//
// swagger:model v1.SwitchNotifyResponse
type V1SwitchNotifyResponse struct {

	// a description for this entity
	Description string `json:"description,omitempty" yaml:"description,omitempty"`

	// the unique ID of this entity
	// Required: true
	ID *string `json:"id" yaml:"id"`

	// last successful synchronization to the switch
	LastSync *V1SwitchSync `json:"last_sync,omitempty" yaml:"last_sync,omitempty"`

	// last synchronization to the switch that was erroneous
	LastSyncError *V1SwitchSync `json:"last_sync_error,omitempty" yaml:"last_sync_error,omitempty"`

	// a readable name for this entity
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this v1 switch notify response
func (m *V1SwitchNotifyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSync(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSyncError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SwitchNotifyResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1SwitchNotifyResponse) validateLastSync(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSync) { // not required
		return nil
	}

	if m.LastSync != nil {
		if err := m.LastSync.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_sync")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_sync")
			}
			return err
		}
	}

	return nil
}

func (m *V1SwitchNotifyResponse) validateLastSyncError(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSyncError) { // not required
		return nil
	}

	if m.LastSyncError != nil {
		if err := m.LastSyncError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_sync_error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_sync_error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 switch notify response based on the context it is used
func (m *V1SwitchNotifyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastSync(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastSyncError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SwitchNotifyResponse) contextValidateLastSync(ctx context.Context, formats strfmt.Registry) error {

	if m.LastSync != nil {

		if swag.IsZero(m.LastSync) { // not required
			return nil
		}

		if err := m.LastSync.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_sync")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_sync")
			}
			return err
		}
	}

	return nil
}

func (m *V1SwitchNotifyResponse) contextValidateLastSyncError(ctx context.Context, formats strfmt.Registry) error {

	if m.LastSyncError != nil {

		if swag.IsZero(m.LastSyncError) { // not required
			return nil
		}

		if err := m.LastSyncError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_sync_error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_sync_error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SwitchNotifyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SwitchNotifyResponse) UnmarshalBinary(b []byte) error {
	var res V1SwitchNotifyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
