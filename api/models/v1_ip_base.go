// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1IPBase v1 IP base
//
// swagger:model v1.IPBase
type V1IPBase struct {

	// the network this ip allocate request address belongs to
	// Required: true
	Networkid *string `json:"networkid" yaml:"networkid"`

	// the project this ip address belongs to
	// Required: true
	Projectid *string `json:"projectid" yaml:"projectid"`

	// free tags that you associate with this ip.
	Tags []string `json:"tags" yaml:"tags"`

	// the ip type, ephemeral leads to automatic cleanup of the ip address, static will enable re-use of the ip at a later point in time
	// Required: true
	// Enum: ["ephemeral","static"]
	Type *string `json:"type" yaml:"type"`
}

// Validate validates this v1 IP base
func (m *V1IPBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IPBase) validateNetworkid(formats strfmt.Registry) error {

	if err := validate.Required("networkid", "body", m.Networkid); err != nil {
		return err
	}

	return nil
}

func (m *V1IPBase) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

var v1IpBaseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ephemeral","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1IpBaseTypeTypePropEnum = append(v1IpBaseTypeTypePropEnum, v)
	}
}

const (

	// V1IPBaseTypeEphemeral captures enum value "ephemeral"
	V1IPBaseTypeEphemeral string = "ephemeral"

	// V1IPBaseTypeStatic captures enum value "static"
	V1IPBaseTypeStatic string = "static"
)

// prop value enum
func (m *V1IPBase) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1IpBaseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1IPBase) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 IP base based on context it is used
func (m *V1IPBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1IPBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IPBase) UnmarshalBinary(b []byte) error {
	var res V1IPBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
