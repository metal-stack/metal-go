// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1IPIdentifiable an ip address that can be attached to a machine
//
// swagger:model v1.IPIdentifiable
type V1IPIdentifiable struct {

	// a unique identifier for this ip address allocation, can be used to distinguish between ip address allocation over time.
	// Required: true
	Allocationuuid *string `json:"allocationuuid"`

	// the address (ipv4 or ipv6) of this ip
	// Required: true
	Ipaddress *string `json:"ipaddress"`
}

// Validate validates this v1 IP identifiable
func (m *V1IPIdentifiable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocationuuid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpaddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IPIdentifiable) validateAllocationuuid(formats strfmt.Registry) error {

	if err := validate.Required("allocationuuid", "body", m.Allocationuuid); err != nil {
		return err
	}

	return nil
}

func (m *V1IPIdentifiable) validateIpaddress(formats strfmt.Registry) error {

	if err := validate.Required("ipaddress", "body", m.Ipaddress); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 IP identifiable based on context it is used
func (m *V1IPIdentifiable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1IPIdentifiable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IPIdentifiable) UnmarshalBinary(b []byte) error {
	var res V1IPIdentifiable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
