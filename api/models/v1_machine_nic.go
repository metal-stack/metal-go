// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineNic v1 machine nic
//
// swagger:model v1.MachineNic
type V1MachineNic struct {

	// the unique identifier of this network interface
	// Required: true
	Identifier *string `json:"identifier" yaml:"identifier"`

	// the mac address of this network interface
	// Required: true
	Mac *string `json:"mac" yaml:"mac"`

	// the name of this network interface
	// Required: true
	Name *string `json:"name" yaml:"name"`

	// the neighbors visible to this network interface
	// Required: true
	Neighbors []*V1MachineNic `json:"neighbors" yaml:"neighbors"`
}

// Validate validates this v1 machine nic
func (m *V1MachineNic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeighbors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineNic) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineNic) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineNic) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineNic) validateNeighbors(formats strfmt.Registry) error {

	if err := validate.Required("neighbors", "body", m.Neighbors); err != nil {
		return err
	}

	for i := 0; i < len(m.Neighbors); i++ {
		if swag.IsZero(m.Neighbors[i]) { // not required
			continue
		}

		if m.Neighbors[i] != nil {
			if err := m.Neighbors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neighbors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("neighbors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 machine nic based on the context it is used
func (m *V1MachineNic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNeighbors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineNic) contextValidateNeighbors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Neighbors); i++ {

		if m.Neighbors[i] != nil {
			if err := m.Neighbors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neighbors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("neighbors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineNic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineNic) UnmarshalBinary(b []byte) error {
	var res V1MachineNic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
