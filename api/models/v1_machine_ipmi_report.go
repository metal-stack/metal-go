// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineIpmiReport v1 machine ipmi report
//
// swagger:model v1.MachineIpmiReport
type V1MachineIpmiReport struct {

	// b i o s version
	// Required: true
	BIOSVersion *string `json:"BIOSVersion" yaml:"BIOSVersion"`

	// b m c Ip
	// Required: true
	BMCIP *string `json:"BMCIp" yaml:"BMCIp"`

	// b m c version
	// Required: true
	BMCVersion *string `json:"BMCVersion" yaml:"BMCVersion"`

	// f r u
	// Required: true
	FRU *V1MachineFru `json:"FRU" yaml:"FRU"`

	// indicator l e d state
	// Required: true
	IndicatorLEDState *string `json:"IndicatorLEDState" yaml:"IndicatorLEDState"`

	// power metric
	// Required: true
	PowerMetric *V1PowerMetric `json:"PowerMetric" yaml:"PowerMetric"`

	// power state
	// Required: true
	PowerState *string `json:"PowerState" yaml:"PowerState"`

	// power supplies
	// Required: true
	PowerSupplies []*V1PowerSupply `json:"PowerSupplies" yaml:"PowerSupplies"`
}

// Validate validates this v1 machine ipmi report
func (m *V1MachineIpmiReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBIOSVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBMCIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBMCVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFRU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndicatorLEDState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerSupplies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineIpmiReport) validateBIOSVersion(formats strfmt.Registry) error {

	if err := validate.Required("BIOSVersion", "body", m.BIOSVersion); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIpmiReport) validateBMCIP(formats strfmt.Registry) error {

	if err := validate.Required("BMCIp", "body", m.BMCIP); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIpmiReport) validateBMCVersion(formats strfmt.Registry) error {

	if err := validate.Required("BMCVersion", "body", m.BMCVersion); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIpmiReport) validateFRU(formats strfmt.Registry) error {

	if err := validate.Required("FRU", "body", m.FRU); err != nil {
		return err
	}

	if m.FRU != nil {
		if err := m.FRU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FRU")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FRU")
			}
			return err
		}
	}

	return nil
}

func (m *V1MachineIpmiReport) validateIndicatorLEDState(formats strfmt.Registry) error {

	if err := validate.Required("IndicatorLEDState", "body", m.IndicatorLEDState); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIpmiReport) validatePowerMetric(formats strfmt.Registry) error {

	if err := validate.Required("PowerMetric", "body", m.PowerMetric); err != nil {
		return err
	}

	if m.PowerMetric != nil {
		if err := m.PowerMetric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PowerMetric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PowerMetric")
			}
			return err
		}
	}

	return nil
}

func (m *V1MachineIpmiReport) validatePowerState(formats strfmt.Registry) error {

	if err := validate.Required("PowerState", "body", m.PowerState); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIpmiReport) validatePowerSupplies(formats strfmt.Registry) error {

	if err := validate.Required("PowerSupplies", "body", m.PowerSupplies); err != nil {
		return err
	}

	for i := 0; i < len(m.PowerSupplies); i++ {
		if swag.IsZero(m.PowerSupplies[i]) { // not required
			continue
		}

		if m.PowerSupplies[i] != nil {
			if err := m.PowerSupplies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PowerSupplies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PowerSupplies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 machine ipmi report based on the context it is used
func (m *V1MachineIpmiReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFRU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerSupplies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineIpmiReport) contextValidateFRU(ctx context.Context, formats strfmt.Registry) error {

	if m.FRU != nil {

		if err := m.FRU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FRU")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FRU")
			}
			return err
		}
	}

	return nil
}

func (m *V1MachineIpmiReport) contextValidatePowerMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerMetric != nil {

		if err := m.PowerMetric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PowerMetric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PowerMetric")
			}
			return err
		}
	}

	return nil
}

func (m *V1MachineIpmiReport) contextValidatePowerSupplies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerSupplies); i++ {

		if m.PowerSupplies[i] != nil {

			if swag.IsZero(m.PowerSupplies[i]) { // not required
				return nil
			}

			if err := m.PowerSupplies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PowerSupplies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PowerSupplies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineIpmiReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineIpmiReport) UnmarshalBinary(b []byte) error {
	var res V1MachineIpmiReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
