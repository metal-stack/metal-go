// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Meta v1 meta
//
// swagger:model v1.Meta
type V1Meta struct {

	// annotations
	Annotations map[string]string `json:"annotations,omitempty"`

	// apiversion
	Apiversion string `json:"apiversion,omitempty"`

	// created time
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"created_time,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// labels
	Labels []string `json:"labels"`

	// updated time
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updated_time,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this v1 meta
func (m *V1Meta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Meta) validateCreatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1Meta) validateUpdatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_time", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 meta based on context it is used
func (m *V1Meta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1Meta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Meta) UnmarshalBinary(b []byte) error {
	var res V1Meta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
