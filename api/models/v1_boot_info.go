// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1BootInfo v1 boot info
// swagger:model v1.BootInfo
type V1BootInfo struct {

	// the bootloader ID
	// Required: true
	Bootloaderid *string `json:"bootloaderid"`

	// the cmdline
	// Required: true
	Cmdline *string `json:"cmdline"`

	// the ID of the current image
	// Required: true
	ImageID *string `json:"image_id"`

	// the initrd image
	// Required: true
	Initrd *string `json:"initrd"`

	// the kernel
	// Required: true
	Kernel *string `json:"kernel"`

	// the partition containing the OS
	// Required: true
	OsPartition *string `json:"os_partition"`

	// the primary disk
	// Required: true
	PrimaryDisk *string `json:"primary_disk"`
}

// Validate validates this v1 boot info
func (m *V1BootInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootloaderid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCmdline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitrd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKernel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsPartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryDisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BootInfo) validateBootloaderid(formats strfmt.Registry) error {

	if err := validate.Required("bootloaderid", "body", m.Bootloaderid); err != nil {
		return err
	}

	return nil
}

func (m *V1BootInfo) validateCmdline(formats strfmt.Registry) error {

	if err := validate.Required("cmdline", "body", m.Cmdline); err != nil {
		return err
	}

	return nil
}

func (m *V1BootInfo) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *V1BootInfo) validateInitrd(formats strfmt.Registry) error {

	if err := validate.Required("initrd", "body", m.Initrd); err != nil {
		return err
	}

	return nil
}

func (m *V1BootInfo) validateKernel(formats strfmt.Registry) error {

	if err := validate.Required("kernel", "body", m.Kernel); err != nil {
		return err
	}

	return nil
}

func (m *V1BootInfo) validateOsPartition(formats strfmt.Registry) error {

	if err := validate.Required("os_partition", "body", m.OsPartition); err != nil {
		return err
	}

	return nil
}

func (m *V1BootInfo) validatePrimaryDisk(formats strfmt.Registry) error {

	if err := validate.Required("primary_disk", "body", m.PrimaryDisk); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BootInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BootInfo) UnmarshalBinary(b []byte) error {
	var res V1BootInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
