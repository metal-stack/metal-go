// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1NetworkUpdateRequest v1 network update request
//
// swagger:model v1.NetworkUpdateRequest
type V1NetworkUpdateRequest struct {

	// list of cidrs which are added to the route maps per tenant private network, these are typically pod- and service cidrs, can only be set for private super networks
	AdditionalAnnouncableCIDRs []string `json:"additionalAnnouncableCIDRs" yaml:"additionalAnnouncableCIDRs"`

	// a description for this entity
	Description string `json:"description,omitempty" yaml:"description,omitempty"`

	// the destination prefixes of this network
	Destinationprefixes []string `json:"destinationprefixes" yaml:"destinationprefixes"`

	// the unique ID of this entity
	// Required: true
	ID *string `json:"id" yaml:"id"`

	// free labels that you associate with this network.
	Labels map[string]string `json:"labels,omitempty" yaml:"labels,omitempty"`

	// a readable name for this entity
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// the prefixes of this network
	Prefixes []string `json:"prefixes" yaml:"prefixes"`

	// marks a network as shareable.
	Shared bool `json:"shared,omitempty" yaml:"shared,omitempty"`
}

// Validate validates this v1 network update request
func (m *V1NetworkUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1NetworkUpdateRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 network update request based on context it is used
func (m *V1NetworkUpdateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1NetworkUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1NetworkUpdateRequest) UnmarshalBinary(b []byte) error {
	var res V1NetworkUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
