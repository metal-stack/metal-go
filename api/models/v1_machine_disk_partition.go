// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineDiskPartition v1 machine disk partition
// swagger:model v1.MachineDiskPartition
type V1MachineDiskPartition struct {

	// the partition device name, e.g. sda1
	// Required: true
	Device *string `json:"device"`

	// the partition filesystem
	// Required: true
	Filesystem *string `json:"filesystem"`

	// the partition GPT guid
	// Required: true
	Gptguid *string `json:"gptguid"`

	// the partition GPT type
	// Required: true
	Gpttyoe *string `json:"gpttyoe"`

	// the partition label
	// Required: true
	Label *string `json:"label"`

	// the partition mount options
	// Required: true
	Mountoptions []string `json:"mountoptions"`

	// the partition mount point
	// Required: true
	Mountpoint *string `json:"mountpoint"`

	// the partition number
	// Required: true
	Number *int64 `json:"number"`

	// the partition properties
	// Required: true
	Properties map[string]string `json:"properties"`

	// the partition size
	// Required: true
	Size *int64 `json:"size"`
}

// Validate validates this v1 machine disk partition
func (m *V1MachineDiskPartition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilesystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGptguid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpttyoe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountoptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineDiskPartition) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineDiskPartition) validateFilesystem(formats strfmt.Registry) error {

	if err := validate.Required("filesystem", "body", m.Filesystem); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineDiskPartition) validateGptguid(formats strfmt.Registry) error {

	if err := validate.Required("gptguid", "body", m.Gptguid); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineDiskPartition) validateGpttyoe(formats strfmt.Registry) error {

	if err := validate.Required("gpttyoe", "body", m.Gpttyoe); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineDiskPartition) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineDiskPartition) validateMountoptions(formats strfmt.Registry) error {

	if err := validate.Required("mountoptions", "body", m.Mountoptions); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineDiskPartition) validateMountpoint(formats strfmt.Registry) error {

	if err := validate.Required("mountpoint", "body", m.Mountpoint); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineDiskPartition) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineDiskPartition) validateProperties(formats strfmt.Registry) error {

	return nil
}

func (m *V1MachineDiskPartition) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineDiskPartition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineDiskPartition) UnmarshalBinary(b []byte) error {
	var res V1MachineDiskPartition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
