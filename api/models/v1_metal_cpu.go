// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MetalCPU v1 metal CPU
//
// swagger:model v1.MetalCPU
type V1MetalCPU struct {

	// the cpu cores
	// Required: true
	Cores *int64 `json:"cores" yaml:"cores"`

	// the cpu model
	// Required: true
	Model *string `json:"model" yaml:"model"`

	// the cpu threads
	// Required: true
	Threads *int64 `json:"threads" yaml:"threads"`

	// the cpu vendor
	// Required: true
	Vendor *string `json:"vendor" yaml:"vendor"`
}

// Validate validates this v1 metal CPU
func (m *V1MetalCPU) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MetalCPU) validateCores(formats strfmt.Registry) error {

	if err := validate.Required("cores", "body", m.Cores); err != nil {
		return err
	}

	return nil
}

func (m *V1MetalCPU) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

func (m *V1MetalCPU) validateThreads(formats strfmt.Registry) error {

	if err := validate.Required("threads", "body", m.Threads); err != nil {
		return err
	}

	return nil
}

func (m *V1MetalCPU) validateVendor(formats strfmt.Registry) error {

	if err := validate.Required("vendor", "body", m.Vendor); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 metal CPU based on context it is used
func (m *V1MetalCPU) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1MetalCPU) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MetalCPU) UnmarshalBinary(b []byte) error {
	var res V1MetalCPU
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
