// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineIpmiReports v1 machine ipmi reports
//
// swagger:model v1.MachineIpmiReports
type V1MachineIpmiReports struct {

	// the partition id for the ipmi report
	Partitionid string `json:"partitionid,omitempty"`

	// uuid to machinereport
	Reports map[string]V1MachineIpmiReport `json:"reports,omitempty"`
}

// Validate validates this v1 machine ipmi reports
func (m *V1MachineIpmiReports) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReports(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineIpmiReports) validateReports(formats strfmt.Registry) error {
	if swag.IsZero(m.Reports) { // not required
		return nil
	}

	for k := range m.Reports {

		if err := validate.Required("reports"+"."+k, "body", m.Reports[k]); err != nil {
			return err
		}
		if val, ok := m.Reports[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 machine ipmi reports based on the context it is used
func (m *V1MachineIpmiReports) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineIpmiReports) contextValidateReports(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Reports {

		if val, ok := m.Reports[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineIpmiReports) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineIpmiReports) UnmarshalBinary(b []byte) error {
	var res V1MachineIpmiReports
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
