// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1FirewallRules v1 firewall rules
//
// swagger:model v1.FirewallRules
type V1FirewallRules struct {

	// egress rules
	// Required: true
	EgressRules []*V1FirewallEgressRule `json:"egress_rules" yaml:"egress_rules"`

	// ingress rules
	// Required: true
	IngressRules []*V1FirewallIngressRule `json:"ingress_rules" yaml:"ingress_rules"`
}

// Validate validates this v1 firewall rules
func (m *V1FirewallRules) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEgressRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1FirewallRules) validateEgressRules(formats strfmt.Registry) error {

	if err := validate.Required("egress_rules", "body", m.EgressRules); err != nil {
		return err
	}

	for i := 0; i < len(m.EgressRules); i++ {
		if swag.IsZero(m.EgressRules[i]) { // not required
			continue
		}

		if m.EgressRules[i] != nil {
			if err := m.EgressRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egress_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("egress_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1FirewallRules) validateIngressRules(formats strfmt.Registry) error {

	if err := validate.Required("ingress_rules", "body", m.IngressRules); err != nil {
		return err
	}

	for i := 0; i < len(m.IngressRules); i++ {
		if swag.IsZero(m.IngressRules[i]) { // not required
			continue
		}

		if m.IngressRules[i] != nil {
			if err := m.IngressRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingress_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ingress_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 firewall rules based on the context it is used
func (m *V1FirewallRules) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEgressRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIngressRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1FirewallRules) contextValidateEgressRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EgressRules); i++ {

		if m.EgressRules[i] != nil {

			if swag.IsZero(m.EgressRules[i]) { // not required
				return nil
			}

			if err := m.EgressRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egress_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("egress_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1FirewallRules) contextValidateIngressRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IngressRules); i++ {

		if m.IngressRules[i] != nil {

			if swag.IsZero(m.IngressRules[i]) { // not required
				return nil
			}

			if err := m.IngressRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingress_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ingress_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1FirewallRules) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1FirewallRules) UnmarshalBinary(b []byte) error {
	var res V1FirewallRules
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
