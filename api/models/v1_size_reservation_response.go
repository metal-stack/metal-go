// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SizeReservationResponse v1 size reservation response
//
// swagger:model v1.SizeReservationResponse
type V1SizeReservationResponse struct {

	// the partition id of this size reservation
	// Required: true
	Partitionid *string `json:"partitionid" yaml:"partitionid"`

	// the amount of allocations of this project referenced by this size reservation
	// Required: true
	Projectallocations *int32 `json:"projectallocations" yaml:"projectallocations"`

	// the project id of this size reservation
	// Required: true
	Projectid *string `json:"projectid" yaml:"projectid"`

	// the project name of this size reservation
	// Required: true
	Projectname *string `json:"projectname" yaml:"projectname"`

	// the amount of reservations of this size reservation
	// Required: true
	Reservations *int32 `json:"reservations" yaml:"reservations"`

	// the size id of this size reservation
	// Required: true
	Sizeid *string `json:"sizeid" yaml:"sizeid"`

	// the tenant of this size reservation
	// Required: true
	Tenant *string `json:"tenant" yaml:"tenant"`

	// the used amount of reservations of this size reservation
	// Required: true
	Usedreservations *int32 `json:"usedreservations" yaml:"usedreservations"`
}

// Validate validates this v1 size reservation response
func (m *V1SizeReservationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartitionid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectallocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReservations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSizeid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedreservations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SizeReservationResponse) validatePartitionid(formats strfmt.Registry) error {

	if err := validate.Required("partitionid", "body", m.Partitionid); err != nil {
		return err
	}

	return nil
}

func (m *V1SizeReservationResponse) validateProjectallocations(formats strfmt.Registry) error {

	if err := validate.Required("projectallocations", "body", m.Projectallocations); err != nil {
		return err
	}

	return nil
}

func (m *V1SizeReservationResponse) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

func (m *V1SizeReservationResponse) validateProjectname(formats strfmt.Registry) error {

	if err := validate.Required("projectname", "body", m.Projectname); err != nil {
		return err
	}

	return nil
}

func (m *V1SizeReservationResponse) validateReservations(formats strfmt.Registry) error {

	if err := validate.Required("reservations", "body", m.Reservations); err != nil {
		return err
	}

	return nil
}

func (m *V1SizeReservationResponse) validateSizeid(formats strfmt.Registry) error {

	if err := validate.Required("sizeid", "body", m.Sizeid); err != nil {
		return err
	}

	return nil
}

func (m *V1SizeReservationResponse) validateTenant(formats strfmt.Registry) error {

	if err := validate.Required("tenant", "body", m.Tenant); err != nil {
		return err
	}

	return nil
}

func (m *V1SizeReservationResponse) validateUsedreservations(formats strfmt.Registry) error {

	if err := validate.Required("usedreservations", "body", m.Usedreservations); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 size reservation response based on context it is used
func (m *V1SizeReservationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1SizeReservationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SizeReservationResponse) UnmarshalBinary(b []byte) error {
	var res V1SizeReservationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
