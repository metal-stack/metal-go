// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SwitchPortToggleRequest v1 switch port toggle request
//
// swagger:model v1.SwitchPortToggleRequest
type V1SwitchPortToggleRequest struct {

	// the nic of the switch you want to change
	// Required: true
	Nic *string `json:"nic" yaml:"nic"`

	// sets the port status
	// Required: true
	// Enum: ["DOWN","UP"]
	Status *string `json:"status" yaml:"status"`
}

// Validate validates this v1 switch port toggle request
func (m *V1SwitchPortToggleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SwitchPortToggleRequest) validateNic(formats strfmt.Registry) error {

	if err := validate.Required("nic", "body", m.Nic); err != nil {
		return err
	}

	return nil
}

var v1SwitchPortToggleRequestTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DOWN","UP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1SwitchPortToggleRequestTypeStatusPropEnum = append(v1SwitchPortToggleRequestTypeStatusPropEnum, v)
	}
}

const (

	// V1SwitchPortToggleRequestStatusDOWN captures enum value "DOWN"
	V1SwitchPortToggleRequestStatusDOWN string = "DOWN"

	// V1SwitchPortToggleRequestStatusUP captures enum value "UP"
	V1SwitchPortToggleRequestStatusUP string = "UP"
)

// prop value enum
func (m *V1SwitchPortToggleRequest) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1SwitchPortToggleRequestTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1SwitchPortToggleRequest) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 switch port toggle request based on context it is used
func (m *V1SwitchPortToggleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1SwitchPortToggleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SwitchPortToggleRequest) UnmarshalBinary(b []byte) error {
	var res V1SwitchPortToggleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
