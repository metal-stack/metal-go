// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1User v1 user
//
// swagger:model v1.User
type V1User struct {

	// e mail
	// Required: true
	EMail *string `json:"EMail" yaml:"EMail"`

	// groups
	// Required: true
	Groups []string `json:"Groups" yaml:"Groups"`

	// issuer
	// Required: true
	Issuer *string `json:"Issuer" yaml:"Issuer"`

	// name
	// Required: true
	Name *string `json:"Name" yaml:"Name"`

	// subject
	// Required: true
	Subject *string `json:"Subject" yaml:"Subject"`

	// tenant
	// Required: true
	Tenant *string `json:"Tenant" yaml:"Tenant"`
}

// Validate validates this v1 user
func (m *V1User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEMail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1User) validateEMail(formats strfmt.Registry) error {

	if err := validate.Required("EMail", "body", m.EMail); err != nil {
		return err
	}

	return nil
}

func (m *V1User) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("Groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *V1User) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Required("Issuer", "body", m.Issuer); err != nil {
		return err
	}

	return nil
}

func (m *V1User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1User) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("Subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

func (m *V1User) validateTenant(formats strfmt.Registry) error {

	if err := validate.Required("Tenant", "body", m.Tenant); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 user based on context it is used
func (m *V1User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1User) UnmarshalBinary(b []byte) error {
	var res V1User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
