// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AuditResponse v1 audit response
//
// swagger:model v1.AuditResponse
type V1AuditResponse struct {

	// body
	Body string `json:"body,omitempty" yaml:"body,omitempty"`

	// component
	Component string `json:"component,omitempty" yaml:"component,omitempty"`

	// detail
	Detail string `json:"detail,omitempty" yaml:"detail,omitempty"`

	// error
	Error string `json:"error,omitempty" yaml:"error,omitempty"`

	// forwarded for
	ForwardedFor string `json:"forwarded_for,omitempty" yaml:"forwarded_for,omitempty"`

	// path
	Path string `json:"path,omitempty" yaml:"path,omitempty"`

	// phase
	Phase string `json:"phase,omitempty" yaml:"phase,omitempty"`

	// remote addr
	RemoteAddr string `json:"remote_addr,omitempty" yaml:"remote_addr,omitempty"`

	// rqid
	Rqid string `json:"rqid,omitempty" yaml:"rqid,omitempty"`

	// status code
	StatusCode int32 `json:"status_code,omitempty" yaml:"status_code,omitempty"`

	// tenant
	Tenant string `json:"tenant,omitempty" yaml:"tenant,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty" yaml:"timestamp,omitempty"`

	// type
	Type string `json:"type,omitempty" yaml:"type,omitempty"`

	// user
	User string `json:"user,omitempty" yaml:"user,omitempty"`
}

// Validate validates this v1 audit response
func (m *V1AuditResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AuditResponse) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 audit response based on context it is used
func (m *V1AuditResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1AuditResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AuditResponse) UnmarshalBinary(b []byte) error {
	var res V1AuditResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
