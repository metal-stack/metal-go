// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1MachineIssue v1 machine issue
//
// swagger:model v1.MachineIssue
type V1MachineIssue struct {

	// a description of the issue
	// Required: true
	Description *string `json:"description" yaml:"description"`

	// details of the issue
	// Required: true
	Details *string `json:"details" yaml:"details"`

	// the id of the issue
	// Required: true
	ID *string `json:"id" yaml:"id"`

	// an issue reference to the issue in metal-stack docs
	// Required: true
	RefURL *string `json:"ref_url" yaml:"ref_url"`

	// the severity of the issue
	// Required: true
	Severity *string `json:"severity" yaml:"severity"`
}

// Validate validates this v1 machine issue
func (m *V1MachineIssue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1MachineIssue) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIssue) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIssue) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIssue) validateRefURL(formats strfmt.Registry) error {

	if err := validate.Required("ref_url", "body", m.RefURL); err != nil {
		return err
	}

	return nil
}

func (m *V1MachineIssue) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 machine issue based on context it is used
func (m *V1MachineIssue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1MachineIssue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1MachineIssue) UnmarshalBinary(b []byte) error {
	var res V1MachineIssue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
