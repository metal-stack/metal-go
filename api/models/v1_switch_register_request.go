// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SwitchRegisterRequest v1 switch register request
//
// swagger:model v1.SwitchRegisterRequest
type V1SwitchRegisterRequest struct {

	// command to access the console of the switch
	ConsoleCommand string `json:"console_command,omitempty" yaml:"console_command,omitempty"`

	// a description for this entity
	Description string `json:"description,omitempty" yaml:"description,omitempty"`

	// the unique ID of this entity
	// Required: true
	ID *string `json:"id" yaml:"id"`

	// the ip address of the management interface of the switch
	ManagementIP string `json:"management_ip,omitempty" yaml:"management_ip,omitempty"`

	// the user to connect to the switch
	ManagementUser string `json:"management_user,omitempty" yaml:"management_user,omitempty"`

	// the mode the switch currently has
	Mode string `json:"mode,omitempty" yaml:"mode,omitempty"`

	// a readable name for this entity
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// the list of network interfaces on the switch
	// Required: true
	Nics []*V1SwitchNic `json:"nics" yaml:"nics"`

	// the operating system the switch currently has
	Os *V1SwitchOS `json:"os,omitempty" yaml:"os,omitempty"`

	// the partition in which this switch is located
	// Required: true
	PartitionID *string `json:"partition_id" yaml:"partition_id"`

	// the id of the rack in which this switch is located
	// Required: true
	RackID *string `json:"rack_id" yaml:"rack_id"`
}

// Validate validates this v1 switch register request
func (m *V1SwitchRegisterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRackID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SwitchRegisterRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1SwitchRegisterRequest) validateNics(formats strfmt.Registry) error {

	if err := validate.Required("nics", "body", m.Nics); err != nil {
		return err
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SwitchRegisterRequest) validateOs(formats strfmt.Registry) error {
	if swag.IsZero(m.Os) { // not required
		return nil
	}

	if m.Os != nil {
		if err := m.Os.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("os")
			}
			return err
		}
	}

	return nil
}

func (m *V1SwitchRegisterRequest) validatePartitionID(formats strfmt.Registry) error {

	if err := validate.Required("partition_id", "body", m.PartitionID); err != nil {
		return err
	}

	return nil
}

func (m *V1SwitchRegisterRequest) validateRackID(formats strfmt.Registry) error {

	if err := validate.Required("rack_id", "body", m.RackID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 switch register request based on the context it is used
func (m *V1SwitchRegisterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SwitchRegisterRequest) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nics); i++ {

		if m.Nics[i] != nil {
			if err := m.Nics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1SwitchRegisterRequest) contextValidateOs(ctx context.Context, formats strfmt.Registry) error {

	if m.Os != nil {
		if err := m.Os.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("os")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SwitchRegisterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SwitchRegisterRequest) UnmarshalBinary(b []byte) error {
	var res V1SwitchRegisterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
