// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ServerCapacity v1 server capacity
//
// swagger:model v1.ServerCapacity
type V1ServerCapacity struct {

	// allocated servers with this size
	// Required: true
	Allocated *int32 `json:"allocated"`

	// servers with issues with this size
	// Required: true
	Faulty *int32 `json:"faulty"`

	// servers with issues with this size
	// Required: true
	Faultymachines []string `json:"faultymachines"`

	// free servers with this size
	// Required: true
	Free *int32 `json:"free"`

	// servers neither free, allocated or faulty with this size
	// Required: true
	Other *int32 `json:"other"`

	// servers neither free, allocated or faulty with this size
	// Required: true
	Othermachines []string `json:"othermachines"`

	// the size of the server
	// Required: true
	Size *string `json:"size"`

	// total amount of servers with this size
	// Required: true
	Total *int32 `json:"total"`
}

// Validate validates this v1 server capacity
func (m *V1ServerCapacity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFaulty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFaultymachines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOthermachines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ServerCapacity) validateAllocated(formats strfmt.Registry) error {

	if err := validate.Required("allocated", "body", m.Allocated); err != nil {
		return err
	}

	return nil
}

func (m *V1ServerCapacity) validateFaulty(formats strfmt.Registry) error {

	if err := validate.Required("faulty", "body", m.Faulty); err != nil {
		return err
	}

	return nil
}

func (m *V1ServerCapacity) validateFaultymachines(formats strfmt.Registry) error {

	if err := validate.Required("faultymachines", "body", m.Faultymachines); err != nil {
		return err
	}

	return nil
}

func (m *V1ServerCapacity) validateFree(formats strfmt.Registry) error {

	if err := validate.Required("free", "body", m.Free); err != nil {
		return err
	}

	return nil
}

func (m *V1ServerCapacity) validateOther(formats strfmt.Registry) error {

	if err := validate.Required("other", "body", m.Other); err != nil {
		return err
	}

	return nil
}

func (m *V1ServerCapacity) validateOthermachines(formats strfmt.Registry) error {

	if err := validate.Required("othermachines", "body", m.Othermachines); err != nil {
		return err
	}

	return nil
}

func (m *V1ServerCapacity) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *V1ServerCapacity) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 server capacity based on context it is used
func (m *V1ServerCapacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1ServerCapacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ServerCapacity) UnmarshalBinary(b []byte) error {
	var res V1ServerCapacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
