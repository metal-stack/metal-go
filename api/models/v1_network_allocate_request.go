// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1NetworkAllocateRequest v1 network allocate request
//
// swagger:model v1.NetworkAllocateRequest
type V1NetworkAllocateRequest struct {

	// the addressfamily to allocate a child network. If not specified, the child network inherits the addressfamilies from the parent.
	// Enum: ["IPv4","IPv6"]
	Addressfamily string `json:"addressfamily,omitempty" yaml:"addressfamily,omitempty"`

	// a description for this entity
	Description string `json:"description,omitempty" yaml:"description,omitempty"`

	// the destination prefixes of this network
	Destinationprefixes []string `json:"destinationprefixes" yaml:"destinationprefixes"`

	// free labels that you associate with this network.
	Labels map[string]string `json:"labels,omitempty" yaml:"labels,omitempty"`

	// the bit lengths of the prefix to allocate, defaults to the default child prefix lengths of the parent network
	Length map[string]int64 `json:"length,omitempty" yaml:"length,omitempty"`

	// a readable name for this entity
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// if set to true, packets leaving this network get masqueraded behind interface ip
	Nat bool `json:"nat,omitempty" yaml:"nat,omitempty"`

	// the parent network from which this network should be allocated
	// Required: true
	Parentnetworkid *string `json:"parentnetworkid" yaml:"parentnetworkid"`

	// the partition this network belongs to
	Partitionid string `json:"partitionid,omitempty" yaml:"partitionid,omitempty"`

	// the project id this network belongs to, can be empty if globally available
	Projectid string `json:"projectid,omitempty" yaml:"projectid,omitempty"`

	// marks a network as shareable.
	Shared bool `json:"shared,omitempty" yaml:"shared,omitempty"`
}

// Validate validates this v1 network allocate request
func (m *V1NetworkAllocateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressfamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentnetworkid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1NetworkAllocateRequestTypeAddressfamilyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IPv4","IPv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1NetworkAllocateRequestTypeAddressfamilyPropEnum = append(v1NetworkAllocateRequestTypeAddressfamilyPropEnum, v)
	}
}

const (

	// V1NetworkAllocateRequestAddressfamilyIPV4 captures enum value "IPv4"
	V1NetworkAllocateRequestAddressfamilyIPV4 string = "IPv4"

	// V1NetworkAllocateRequestAddressfamilyIPV6 captures enum value "IPv6"
	V1NetworkAllocateRequestAddressfamilyIPV6 string = "IPv6"
)

// prop value enum
func (m *V1NetworkAllocateRequest) validateAddressfamilyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1NetworkAllocateRequestTypeAddressfamilyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1NetworkAllocateRequest) validateAddressfamily(formats strfmt.Registry) error {
	if swag.IsZero(m.Addressfamily) { // not required
		return nil
	}

	// value enum
	if err := m.validateAddressfamilyEnum("addressfamily", "body", m.Addressfamily); err != nil {
		return err
	}

	return nil
}

func (m *V1NetworkAllocateRequest) validateParentnetworkid(formats strfmt.Registry) error {

	if err := validate.Required("parentnetworkid", "body", m.Parentnetworkid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 network allocate request based on context it is used
func (m *V1NetworkAllocateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1NetworkAllocateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1NetworkAllocateRequest) UnmarshalBinary(b []byte) error {
	var res V1NetworkAllocateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
