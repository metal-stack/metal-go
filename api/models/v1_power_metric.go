// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PowerMetric v1 power metric
//
// swagger:model v1.PowerMetric
type V1PowerMetric struct {

	// averageconsumedwatts
	// Required: true
	Averageconsumedwatts *float32 `json:"averageconsumedwatts" yaml:"averageconsumedwatts"`

	// intervalinmin
	// Required: true
	Intervalinmin *float32 `json:"intervalinmin" yaml:"intervalinmin"`

	// maxconsumedwatts
	// Required: true
	Maxconsumedwatts *float32 `json:"maxconsumedwatts" yaml:"maxconsumedwatts"`

	// minconsumedwatts
	// Required: true
	Minconsumedwatts *float32 `json:"minconsumedwatts" yaml:"minconsumedwatts"`
}

// Validate validates this v1 power metric
func (m *V1PowerMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverageconsumedwatts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervalinmin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxconsumedwatts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinconsumedwatts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PowerMetric) validateAverageconsumedwatts(formats strfmt.Registry) error {

	if err := validate.Required("averageconsumedwatts", "body", m.Averageconsumedwatts); err != nil {
		return err
	}

	return nil
}

func (m *V1PowerMetric) validateIntervalinmin(formats strfmt.Registry) error {

	if err := validate.Required("intervalinmin", "body", m.Intervalinmin); err != nil {
		return err
	}

	return nil
}

func (m *V1PowerMetric) validateMaxconsumedwatts(formats strfmt.Registry) error {

	if err := validate.Required("maxconsumedwatts", "body", m.Maxconsumedwatts); err != nil {
		return err
	}

	return nil
}

func (m *V1PowerMetric) validateMinconsumedwatts(formats strfmt.Registry) error {

	if err := validate.Required("minconsumedwatts", "body", m.Minconsumedwatts); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 power metric based on context it is used
func (m *V1PowerMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1PowerMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PowerMetric) UnmarshalBinary(b []byte) error {
	var res V1PowerMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
