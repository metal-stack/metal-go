// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1NetworkFindRequest v1 network find request
//
// swagger:model v1.NetworkFindRequest
type V1NetworkFindRequest struct {

	// addressfamily
	// Enum: ["IPv4","IPv6"]
	Addressfamily string `json:"addressfamily,omitempty" yaml:"addressfamily,omitempty"`

	// destinationprefixes
	Destinationprefixes []string `json:"destinationprefixes" yaml:"destinationprefixes"`

	// id
	ID string `json:"id,omitempty" yaml:"id,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty" yaml:"labels,omitempty"`

	// name
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// nat
	Nat bool `json:"nat,omitempty" yaml:"nat,omitempty"`

	// parentnetworkid
	Parentnetworkid string `json:"parentnetworkid,omitempty" yaml:"parentnetworkid,omitempty"`

	// partitionid
	Partitionid string `json:"partitionid,omitempty" yaml:"partitionid,omitempty"`

	// prefixes
	Prefixes []string `json:"prefixes" yaml:"prefixes"`

	// privatesuper
	Privatesuper bool `json:"privatesuper,omitempty" yaml:"privatesuper,omitempty"`

	// projectid
	Projectid string `json:"projectid,omitempty" yaml:"projectid,omitempty"`

	// underlay
	Underlay bool `json:"underlay,omitempty" yaml:"underlay,omitempty"`

	// vrf
	Vrf int64 `json:"vrf,omitempty" yaml:"vrf,omitempty"`
}

// Validate validates this v1 network find request
func (m *V1NetworkFindRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressfamily(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1NetworkFindRequestTypeAddressfamilyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IPv4","IPv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1NetworkFindRequestTypeAddressfamilyPropEnum = append(v1NetworkFindRequestTypeAddressfamilyPropEnum, v)
	}
}

const (

	// V1NetworkFindRequestAddressfamilyIPV4 captures enum value "IPv4"
	V1NetworkFindRequestAddressfamilyIPV4 string = "IPv4"

	// V1NetworkFindRequestAddressfamilyIPV6 captures enum value "IPv6"
	V1NetworkFindRequestAddressfamilyIPV6 string = "IPv6"
)

// prop value enum
func (m *V1NetworkFindRequest) validateAddressfamilyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v1NetworkFindRequestTypeAddressfamilyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V1NetworkFindRequest) validateAddressfamily(formats strfmt.Registry) error {
	if swag.IsZero(m.Addressfamily) { // not required
		return nil
	}

	// value enum
	if err := m.validateAddressfamilyEnum("addressfamily", "body", m.Addressfamily); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 network find request based on context it is used
func (m *V1NetworkFindRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1NetworkFindRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1NetworkFindRequest) UnmarshalBinary(b []byte) error {
	var res V1NetworkFindRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
