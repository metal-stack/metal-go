// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Filesystem v1 filesystem
//
// swagger:model v1.Filesystem
type V1Filesystem struct {

	// the options to use to create (mkfs) this filesystem
	Createoptions []string `json:"createoptions"`

	// the underlaying device where this filesystem should be created
	// Required: true
	Device *string `json:"device"`

	// the filesystem format
	// Required: true
	Format *string `json:"format"`

	// optional label for this this filesystem
	Label string `json:"label,omitempty"`

	// the options to use to mount this filesystem
	Mountoptions []string `json:"mountoptions"`

	// the mountpoint where this filesystem should be mounted on
	Path string `json:"path,omitempty"`
}

// Validate validates this v1 filesystem
func (m *V1Filesystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Filesystem) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	return nil
}

func (m *V1Filesystem) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 filesystem based on context it is used
func (m *V1Filesystem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1Filesystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Filesystem) UnmarshalBinary(b []byte) error {
	var res V1Filesystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
