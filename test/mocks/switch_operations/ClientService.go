// Code generated by mockery v2.16.0. DO NOT EDIT.

package switch_operations

import (
	clientswitch_operations "github.com/metal-stack/metal-go/api/client/switch_operations"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// DeleteSwitch provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteSwitch(params *clientswitch_operations.DeleteSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientswitch_operations.ClientOption) (*clientswitch_operations.DeleteSwitchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientswitch_operations.DeleteSwitchOK
	if rf, ok := ret.Get(0).(func(*clientswitch_operations.DeleteSwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) *clientswitch_operations.DeleteSwitchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientswitch_operations.DeleteSwitchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientswitch_operations.DeleteSwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSwitch provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindSwitch(params *clientswitch_operations.FindSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientswitch_operations.ClientOption) (*clientswitch_operations.FindSwitchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientswitch_operations.FindSwitchOK
	if rf, ok := ret.Get(0).(func(*clientswitch_operations.FindSwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) *clientswitch_operations.FindSwitchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientswitch_operations.FindSwitchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientswitch_operations.FindSwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSwitches provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindSwitches(params *clientswitch_operations.FindSwitchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientswitch_operations.ClientOption) (*clientswitch_operations.FindSwitchesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientswitch_operations.FindSwitchesOK
	if rf, ok := ret.Get(0).(func(*clientswitch_operations.FindSwitchesParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) *clientswitch_operations.FindSwitchesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientswitch_operations.FindSwitchesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientswitch_operations.FindSwitchesParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSwitches provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListSwitches(params *clientswitch_operations.ListSwitchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientswitch_operations.ClientOption) (*clientswitch_operations.ListSwitchesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientswitch_operations.ListSwitchesOK
	if rf, ok := ret.Get(0).(func(*clientswitch_operations.ListSwitchesParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) *clientswitch_operations.ListSwitchesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientswitch_operations.ListSwitchesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientswitch_operations.ListSwitchesParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifySwitch provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NotifySwitch(params *clientswitch_operations.NotifySwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientswitch_operations.ClientOption) (*clientswitch_operations.NotifySwitchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientswitch_operations.NotifySwitchOK
	if rf, ok := ret.Get(0).(func(*clientswitch_operations.NotifySwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) *clientswitch_operations.NotifySwitchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientswitch_operations.NotifySwitchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientswitch_operations.NotifySwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSwitch provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) RegisterSwitch(params *clientswitch_operations.RegisterSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientswitch_operations.ClientOption) (*clientswitch_operations.RegisterSwitchOK, *clientswitch_operations.RegisterSwitchCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientswitch_operations.RegisterSwitchOK
	if rf, ok := ret.Get(0).(func(*clientswitch_operations.RegisterSwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) *clientswitch_operations.RegisterSwitchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientswitch_operations.RegisterSwitchOK)
		}
	}

	var r1 *clientswitch_operations.RegisterSwitchCreated
	if rf, ok := ret.Get(1).(func(*clientswitch_operations.RegisterSwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) *clientswitch_operations.RegisterSwitchCreated); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientswitch_operations.RegisterSwitchCreated)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*clientswitch_operations.RegisterSwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateSwitch provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateSwitch(params *clientswitch_operations.UpdateSwitchParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientswitch_operations.ClientOption) (*clientswitch_operations.UpdateSwitchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientswitch_operations.UpdateSwitchOK
	if rf, ok := ret.Get(0).(func(*clientswitch_operations.UpdateSwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) *clientswitch_operations.UpdateSwitchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientswitch_operations.UpdateSwitchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientswitch_operations.UpdateSwitchParams, runtime.ClientAuthInfoWriter, ...clientswitch_operations.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientService(t mockConstructorTestingTNewClientService) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
