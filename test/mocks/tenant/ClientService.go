// Code generated by mockery v2.33.2. DO NOT EDIT.

package tenant

import (
	clienttenant "github.com/metal-stack/metal-go/api/client/tenant"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// CreateTenant provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CreateTenant(params *clienttenant.CreateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...clienttenant.ClientOption) (*clienttenant.CreateTenantCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clienttenant.CreateTenantCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clienttenant.CreateTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) (*clienttenant.CreateTenantCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clienttenant.CreateTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) *clienttenant.CreateTenantCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clienttenant.CreateTenantCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clienttenant.CreateTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenant provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteTenant(params *clienttenant.DeleteTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...clienttenant.ClientOption) (*clienttenant.DeleteTenantOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clienttenant.DeleteTenantOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clienttenant.DeleteTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) (*clienttenant.DeleteTenantOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clienttenant.DeleteTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) *clienttenant.DeleteTenantOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clienttenant.DeleteTenantOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clienttenant.DeleteTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTenants provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindTenants(params *clienttenant.FindTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clienttenant.ClientOption) (*clienttenant.FindTenantsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clienttenant.FindTenantsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clienttenant.FindTenantsParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) (*clienttenant.FindTenantsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clienttenant.FindTenantsParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) *clienttenant.FindTenantsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clienttenant.FindTenantsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clienttenant.FindTenantsParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenant provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetTenant(params *clienttenant.GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...clienttenant.ClientOption) (*clienttenant.GetTenantOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clienttenant.GetTenantOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clienttenant.GetTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) (*clienttenant.GetTenantOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clienttenant.GetTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) *clienttenant.GetTenantOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clienttenant.GetTenantOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clienttenant.GetTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTenants provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListTenants(params *clienttenant.ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clienttenant.ClientOption) (*clienttenant.ListTenantsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clienttenant.ListTenantsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clienttenant.ListTenantsParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) (*clienttenant.ListTenantsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clienttenant.ListTenantsParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) *clienttenant.ListTenantsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clienttenant.ListTenantsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clienttenant.ListTenantsParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateTenant provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateTenant(params *clienttenant.UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...clienttenant.ClientOption) (*clienttenant.UpdateTenantOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clienttenant.UpdateTenantOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clienttenant.UpdateTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) (*clienttenant.UpdateTenantOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clienttenant.UpdateTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) *clienttenant.UpdateTenantOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clienttenant.UpdateTenantOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clienttenant.UpdateTenantParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantHistory provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetTenantHistory(params *clienttenant.GetTenantHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...clienttenant.ClientOption) (*clienttenant.GetTenantHistoryOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clienttenant.GetTenantHistoryOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clienttenant.GetTenantHistoryParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) (*clienttenant.GetTenantHistoryOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clienttenant.GetTenantHistoryParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) *clienttenant.GetTenantHistoryOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clienttenant.GetTenantHistoryOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clienttenant.GetTenantHistoryParams, runtime.ClientAuthInfoWriter, ...clienttenant.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
