// Code generated by mockery v2.16.0. DO NOT EDIT.

package project

import (
	clientproject "github.com/metal-stack/metal-go/api/client/project"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// CreateProject provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CreateProject(params *clientproject.CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientproject.ClientOption) (*clientproject.CreateProjectCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientproject.CreateProjectCreated
	if rf, ok := ret.Get(0).(func(*clientproject.CreateProjectParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) *clientproject.CreateProjectCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientproject.CreateProjectCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientproject.CreateProjectParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteProject(params *clientproject.DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientproject.ClientOption) (*clientproject.DeleteProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientproject.DeleteProjectOK
	if rf, ok := ret.Get(0).(func(*clientproject.DeleteProjectParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) *clientproject.DeleteProjectOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientproject.DeleteProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientproject.DeleteProjectParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProject provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindProject(params *clientproject.FindProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientproject.ClientOption) (*clientproject.FindProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientproject.FindProjectOK
	if rf, ok := ret.Get(0).(func(*clientproject.FindProjectParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) *clientproject.FindProjectOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientproject.FindProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientproject.FindProjectParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProjects provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindProjects(params *clientproject.FindProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientproject.ClientOption) (*clientproject.FindProjectsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientproject.FindProjectsOK
	if rf, ok := ret.Get(0).(func(*clientproject.FindProjectsParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) *clientproject.FindProjectsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientproject.FindProjectsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientproject.FindProjectsParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListProjects(params *clientproject.ListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientproject.ClientOption) (*clientproject.ListProjectsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientproject.ListProjectsOK
	if rf, ok := ret.Get(0).(func(*clientproject.ListProjectsParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) *clientproject.ListProjectsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientproject.ListProjectsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientproject.ListProjectsParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateProject provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateProject(params *clientproject.UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientproject.ClientOption) (*clientproject.UpdateProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientproject.UpdateProjectOK
	if rf, ok := ret.Get(0).(func(*clientproject.UpdateProjectParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) *clientproject.UpdateProjectOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientproject.UpdateProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*clientproject.UpdateProjectParams, runtime.ClientAuthInfoWriter, ...clientproject.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientService(t mockConstructorTestingTNewClientService) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
