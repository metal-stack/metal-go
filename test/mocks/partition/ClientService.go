// Code generated by mockery v2.7.4. DO NOT EDIT.

package partition

import (
	runtime "github.com/go-openapi/runtime"
	partition "github.com/metal-stack/metal-go/api/client/partition"
	mock "github.com/stretchr/testify/mock"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// CreatePartition provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CreatePartition(params *partition.CreatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...partition.ClientOption) (*partition.CreatePartitionCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *partition.CreatePartitionCreated
	if rf, ok := ret.Get(0).(func(*partition.CreatePartitionParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) *partition.CreatePartitionCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partition.CreatePartitionCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*partition.CreatePartitionParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartition provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeletePartition(params *partition.DeletePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...partition.ClientOption) (*partition.DeletePartitionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *partition.DeletePartitionOK
	if rf, ok := ret.Get(0).(func(*partition.DeletePartitionParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) *partition.DeletePartitionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partition.DeletePartitionOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*partition.DeletePartitionParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPartition provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindPartition(params *partition.FindPartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...partition.ClientOption) (*partition.FindPartitionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *partition.FindPartitionOK
	if rf, ok := ret.Get(0).(func(*partition.FindPartitionParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) *partition.FindPartitionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partition.FindPartitionOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*partition.FindPartitionParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartitions provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListPartitions(params *partition.ListPartitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...partition.ClientOption) (*partition.ListPartitionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *partition.ListPartitionsOK
	if rf, ok := ret.Get(0).(func(*partition.ListPartitionsParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) *partition.ListPartitionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partition.ListPartitionsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*partition.ListPartitionsParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartitionCapacity provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PartitionCapacity(params *partition.PartitionCapacityParams, authInfo runtime.ClientAuthInfoWriter, opts ...partition.ClientOption) (*partition.PartitionCapacityOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *partition.PartitionCapacityOK
	if rf, ok := ret.Get(0).(func(*partition.PartitionCapacityParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) *partition.PartitionCapacityOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partition.PartitionCapacityOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*partition.PartitionCapacityParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdatePartition provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdatePartition(params *partition.UpdatePartitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...partition.ClientOption) (*partition.UpdatePartitionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *partition.UpdatePartitionOK
	if rf, ok := ret.Get(0).(func(*partition.UpdatePartitionParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) *partition.UpdatePartitionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partition.UpdatePartitionOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*partition.UpdatePartitionParams, runtime.ClientAuthInfoWriter, ...partition.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
