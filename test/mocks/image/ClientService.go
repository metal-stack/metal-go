// Code generated by mockery v2.7.4. DO NOT EDIT.

package image

import (
	image "github.com/metal-stack/metal-go/api/client/image"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// CreateImage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CreateImage(params *image.CreateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...image.ClientOption) (*image.CreateImageCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *image.CreateImageCreated
	if rf, ok := ret.Get(0).(func(*image.CreateImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) *image.CreateImageCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.CreateImageCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*image.CreateImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteImage(params *image.DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...image.ClientOption) (*image.DeleteImageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *image.DeleteImageOK
	if rf, ok := ret.Get(0).(func(*image.DeleteImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) *image.DeleteImageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.DeleteImageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*image.DeleteImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindImage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindImage(params *image.FindImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...image.ClientOption) (*image.FindImageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *image.FindImageOK
	if rf, ok := ret.Get(0).(func(*image.FindImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) *image.FindImageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.FindImageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*image.FindImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestImage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindLatestImage(params *image.FindLatestImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...image.ClientOption) (*image.FindLatestImageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *image.FindLatestImageOK
	if rf, ok := ret.Get(0).(func(*image.FindLatestImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) *image.FindLatestImageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.FindLatestImageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*image.FindLatestImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImages provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListImages(params *image.ListImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...image.ClientOption) (*image.ListImagesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *image.ListImagesOK
	if rf, ok := ret.Get(0).(func(*image.ListImagesParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) *image.ListImagesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.ListImagesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*image.ListImagesParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryImagesByID provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) QueryImagesByID(params *image.QueryImagesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...image.ClientOption) (*image.QueryImagesByIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *image.QueryImagesByIDOK
	if rf, ok := ret.Get(0).(func(*image.QueryImagesByIDParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) *image.QueryImagesByIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.QueryImagesByIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*image.QueryImagesByIDParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateImage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateImage(params *image.UpdateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...image.ClientOption) (*image.UpdateImageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *image.UpdateImageOK
	if rf, ok := ret.Get(0).(func(*image.UpdateImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) *image.UpdateImageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.UpdateImageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*image.UpdateImageParams, runtime.ClientAuthInfoWriter, ...image.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
