// Code generated by mockery (devel). DO NOT EDIT.

package filesystemlayout

import (
	filesystemlayout "github.com/metal-stack/metal-go/api/client/filesystemlayout"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// CreateFilesystemLayout provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CreateFilesystemLayout(params *filesystemlayout.CreateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...filesystemlayout.ClientOption) (*filesystemlayout.CreateFilesystemLayoutCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *filesystemlayout.CreateFilesystemLayoutCreated
	if rf, ok := ret.Get(0).(func(*filesystemlayout.CreateFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) *filesystemlayout.CreateFilesystemLayoutCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filesystemlayout.CreateFilesystemLayoutCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*filesystemlayout.CreateFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFilesystemLayout provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteFilesystemLayout(params *filesystemlayout.DeleteFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...filesystemlayout.ClientOption) (*filesystemlayout.DeleteFilesystemLayoutOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *filesystemlayout.DeleteFilesystemLayoutOK
	if rf, ok := ret.Get(0).(func(*filesystemlayout.DeleteFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) *filesystemlayout.DeleteFilesystemLayoutOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filesystemlayout.DeleteFilesystemLayoutOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*filesystemlayout.DeleteFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilesystemLayout provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetFilesystemLayout(params *filesystemlayout.GetFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...filesystemlayout.ClientOption) (*filesystemlayout.GetFilesystemLayoutOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *filesystemlayout.GetFilesystemLayoutOK
	if rf, ok := ret.Get(0).(func(*filesystemlayout.GetFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) *filesystemlayout.GetFilesystemLayoutOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filesystemlayout.GetFilesystemLayoutOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*filesystemlayout.GetFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFilesystemLayouts provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListFilesystemLayouts(params *filesystemlayout.ListFilesystemLayoutsParams, authInfo runtime.ClientAuthInfoWriter, opts ...filesystemlayout.ClientOption) (*filesystemlayout.ListFilesystemLayoutsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *filesystemlayout.ListFilesystemLayoutsOK
	if rf, ok := ret.Get(0).(func(*filesystemlayout.ListFilesystemLayoutsParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) *filesystemlayout.ListFilesystemLayoutsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filesystemlayout.ListFilesystemLayoutsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*filesystemlayout.ListFilesystemLayoutsParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchFilesystemLayout provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) MatchFilesystemLayout(params *filesystemlayout.MatchFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...filesystemlayout.ClientOption) (*filesystemlayout.MatchFilesystemLayoutOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *filesystemlayout.MatchFilesystemLayoutOK
	if rf, ok := ret.Get(0).(func(*filesystemlayout.MatchFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) *filesystemlayout.MatchFilesystemLayoutOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filesystemlayout.MatchFilesystemLayoutOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*filesystemlayout.MatchFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// TryFilesystemLayout provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) TryFilesystemLayout(params *filesystemlayout.TryFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...filesystemlayout.ClientOption) (*filesystemlayout.TryFilesystemLayoutOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *filesystemlayout.TryFilesystemLayoutOK
	if rf, ok := ret.Get(0).(func(*filesystemlayout.TryFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) *filesystemlayout.TryFilesystemLayoutOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filesystemlayout.TryFilesystemLayoutOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*filesystemlayout.TryFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFilesystemLayout provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateFilesystemLayout(params *filesystemlayout.UpdateFilesystemLayoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...filesystemlayout.ClientOption) (*filesystemlayout.UpdateFilesystemLayoutOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *filesystemlayout.UpdateFilesystemLayoutOK
	if rf, ok := ret.Get(0).(func(*filesystemlayout.UpdateFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) *filesystemlayout.UpdateFilesystemLayoutOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filesystemlayout.UpdateFilesystemLayoutOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*filesystemlayout.UpdateFilesystemLayoutParams, runtime.ClientAuthInfoWriter, ...filesystemlayout.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
