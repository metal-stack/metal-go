// Code generated by mockery v2.46.3. DO NOT EDIT.

package size

import (
	clientsize "github.com/metal-stack/metal-go/api/client/size"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// CreateSize provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CreateSize(params *clientsize.CreateSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.CreateSizeCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSize")
	}

	var r0 *clientsize.CreateSizeCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.CreateSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.CreateSizeCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.CreateSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.CreateSizeCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.CreateSizeCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.CreateSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSizeReservation provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CreateSizeReservation(params *clientsize.CreateSizeReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.CreateSizeReservationCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSizeReservation")
	}

	var r0 *clientsize.CreateSizeReservationCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.CreateSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.CreateSizeReservationCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.CreateSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.CreateSizeReservationCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.CreateSizeReservationCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.CreateSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSize provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteSize(params *clientsize.DeleteSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.DeleteSizeOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSize")
	}

	var r0 *clientsize.DeleteSizeOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.DeleteSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.DeleteSizeOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.DeleteSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.DeleteSizeOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.DeleteSizeOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.DeleteSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSizeReservation provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteSizeReservation(params *clientsize.DeleteSizeReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.DeleteSizeReservationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSizeReservation")
	}

	var r0 *clientsize.DeleteSizeReservationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.DeleteSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.DeleteSizeReservationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.DeleteSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.DeleteSizeReservationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.DeleteSizeReservationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.DeleteSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSize provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindSize(params *clientsize.FindSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.FindSizeOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindSize")
	}

	var r0 *clientsize.FindSizeOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.FindSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.FindSizeOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.FindSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.FindSizeOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.FindSizeOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.FindSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSizeReservations provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FindSizeReservations(params *clientsize.FindSizeReservationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.FindSizeReservationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindSizeReservations")
	}

	var r0 *clientsize.FindSizeReservationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.FindSizeReservationsParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.FindSizeReservationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.FindSizeReservationsParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.FindSizeReservationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.FindSizeReservationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.FindSizeReservationsParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSizeReservation provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetSizeReservation(params *clientsize.GetSizeReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.GetSizeReservationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSizeReservation")
	}

	var r0 *clientsize.GetSizeReservationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.GetSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.GetSizeReservationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.GetSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.GetSizeReservationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.GetSizeReservationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.GetSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSizeReservations provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListSizeReservations(params *clientsize.ListSizeReservationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.ListSizeReservationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSizeReservations")
	}

	var r0 *clientsize.ListSizeReservationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.ListSizeReservationsParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.ListSizeReservationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.ListSizeReservationsParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.ListSizeReservationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.ListSizeReservationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.ListSizeReservationsParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSizes provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ListSizes(params *clientsize.ListSizesParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.ListSizesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSizes")
	}

	var r0 *clientsize.ListSizesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.ListSizesParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.ListSizesOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.ListSizesParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.ListSizesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.ListSizesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.ListSizesParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// SizeReservationsUsage provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SizeReservationsUsage(params *clientsize.SizeReservationsUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.SizeReservationsUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SizeReservationsUsage")
	}

	var r0 *clientsize.SizeReservationsUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.SizeReservationsUsageParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.SizeReservationsUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.SizeReservationsUsageParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.SizeReservationsUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.SizeReservationsUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.SizeReservationsUsageParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Suggest provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) Suggest(params *clientsize.SuggestParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.SuggestOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Suggest")
	}

	var r0 *clientsize.SuggestOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.SuggestParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.SuggestOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.SuggestParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.SuggestOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.SuggestOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.SuggestParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSize provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateSize(params *clientsize.UpdateSizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.UpdateSizeOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSize")
	}

	var r0 *clientsize.UpdateSizeOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.UpdateSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.UpdateSizeOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.UpdateSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.UpdateSizeOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.UpdateSizeOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.UpdateSizeParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSizeReservation provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) UpdateSizeReservation(params *clientsize.UpdateSizeReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsize.ClientOption) (*clientsize.UpdateSizeReservationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSizeReservation")
	}

	var r0 *clientsize.UpdateSizeReservationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsize.UpdateSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) (*clientsize.UpdateSizeReservationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsize.UpdateSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) *clientsize.UpdateSizeReservationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsize.UpdateSizeReservationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsize.UpdateSizeReservationParams, runtime.ClientAuthInfoWriter, ...clientsize.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
