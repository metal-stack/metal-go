// Code generated by generate_mock_client.go. DO NOT EDIT.
package client

import (
	"testing"

	metalgo "github.com/metal-stack/metal-go"

	"github.com/metal-stack/metal-go/api/client/audit"
	"github.com/metal-stack/metal-go/api/client/filesystemlayout"
	"github.com/metal-stack/metal-go/api/client/firewall"
	"github.com/metal-stack/metal-go/api/client/firmware"
	"github.com/metal-stack/metal-go/api/client/health"
	"github.com/metal-stack/metal-go/api/client/image"
	"github.com/metal-stack/metal-go/api/client/ip"
	"github.com/metal-stack/metal-go/api/client/machine"
	"github.com/metal-stack/metal-go/api/client/network"
	"github.com/metal-stack/metal-go/api/client/partition"
	"github.com/metal-stack/metal-go/api/client/project"
	"github.com/metal-stack/metal-go/api/client/size"
	"github.com/metal-stack/metal-go/api/client/sizeimageconstraint"
	"github.com/metal-stack/metal-go/api/client/switch_operations"
	"github.com/metal-stack/metal-go/api/client/tenant"
	"github.com/metal-stack/metal-go/api/client/user"
	"github.com/metal-stack/metal-go/api/client/version"
	"github.com/metal-stack/metal-go/api/client/vpn"
	auditmocks "github.com/metal-stack/metal-go/test/mocks/audit"
	filesystemlayoutmocks "github.com/metal-stack/metal-go/test/mocks/filesystemlayout"
	firewallmocks "github.com/metal-stack/metal-go/test/mocks/firewall"
	firmwaremocks "github.com/metal-stack/metal-go/test/mocks/firmware"
	healthmocks "github.com/metal-stack/metal-go/test/mocks/health"
	imagemocks "github.com/metal-stack/metal-go/test/mocks/image"
	ipmocks "github.com/metal-stack/metal-go/test/mocks/ip"
	machinemocks "github.com/metal-stack/metal-go/test/mocks/machine"
	networkmocks "github.com/metal-stack/metal-go/test/mocks/network"
	partitionmocks "github.com/metal-stack/metal-go/test/mocks/partition"
	projectmocks "github.com/metal-stack/metal-go/test/mocks/project"
	sizemocks "github.com/metal-stack/metal-go/test/mocks/size"
	sizeimageconstraintmocks "github.com/metal-stack/metal-go/test/mocks/sizeimageconstraint"
	switchoperationsmocks "github.com/metal-stack/metal-go/test/mocks/switch_operations"
	tenantmocks "github.com/metal-stack/metal-go/test/mocks/tenant"
	usermocks "github.com/metal-stack/metal-go/test/mocks/user"
	versionmocks "github.com/metal-stack/metal-go/test/mocks/version"
	vpnmocks "github.com/metal-stack/metal-go/test/mocks/vpn"

	"github.com/stretchr/testify/mock"
)

type MetalMockFns struct {
	Audit               func(mock *mock.Mock)
	Filesystemlayout    func(mock *mock.Mock)
	Firewall            func(mock *mock.Mock)
	Firmware            func(mock *mock.Mock)
	Health              func(mock *mock.Mock)
	Image               func(mock *mock.Mock)
	IP                  func(mock *mock.Mock)
	Machine             func(mock *mock.Mock)
	Network             func(mock *mock.Mock)
	Partition           func(mock *mock.Mock)
	Project             func(mock *mock.Mock)
	Size                func(mock *mock.Mock)
	Sizeimageconstraint func(mock *mock.Mock)
	SwitchOperations    func(mock *mock.Mock)
	Tenant              func(mock *mock.Mock)
	User                func(mock *mock.Mock)
	Version             func(mock *mock.Mock)
	VPN                 func(mock *mock.Mock)
}

type MetalMockClient struct {
	audit               *auditmocks.ClientService
	filesystemlayout    *filesystemlayoutmocks.ClientService
	firewall            *firewallmocks.ClientService
	firmware            *firmwaremocks.ClientService
	health              *healthmocks.ClientService
	image               *imagemocks.ClientService
	ip                  *ipmocks.ClientService
	machine             *machinemocks.ClientService
	network             *networkmocks.ClientService
	partition           *partitionmocks.ClientService
	project             *projectmocks.ClientService
	size                *sizemocks.ClientService
	sizeimageconstraint *sizeimageconstraintmocks.ClientService
	switchoperations    *switchoperationsmocks.ClientService
	tenant              *tenantmocks.ClientService
	user                *usermocks.ClientService
	version             *versionmocks.ClientService
	vpn                 *vpnmocks.ClientService
}

func NewMetalMockClient(t *testing.T, mockFns *MetalMockFns) (*MetalMockClient, metalgo.Client) {
	client := &MetalMockClient{
		audit:               auditmocks.NewClientService(t),
		filesystemlayout:    filesystemlayoutmocks.NewClientService(t),
		firewall:            firewallmocks.NewClientService(t),
		firmware:            firmwaremocks.NewClientService(t),
		health:              healthmocks.NewClientService(t),
		image:               imagemocks.NewClientService(t),
		ip:                  ipmocks.NewClientService(t),
		machine:             machinemocks.NewClientService(t),
		network:             networkmocks.NewClientService(t),
		partition:           partitionmocks.NewClientService(t),
		project:             projectmocks.NewClientService(t),
		size:                sizemocks.NewClientService(t),
		sizeimageconstraint: sizeimageconstraintmocks.NewClientService(t),
		switchoperations:    switchoperationsmocks.NewClientService(t),
		tenant:              tenantmocks.NewClientService(t),
		user:                usermocks.NewClientService(t),
		version:             versionmocks.NewClientService(t),
		vpn:                 vpnmocks.NewClientService(t),
	}

	if mockFns == nil {
		return client, client
	}

	if mockFns.Audit != nil {
		mockFns.Audit(&client.audit.Mock)
	}
	if mockFns.Filesystemlayout != nil {
		mockFns.Filesystemlayout(&client.filesystemlayout.Mock)
	}
	if mockFns.Firewall != nil {
		mockFns.Firewall(&client.firewall.Mock)
	}
	if mockFns.Firmware != nil {
		mockFns.Firmware(&client.firmware.Mock)
	}
	if mockFns.Health != nil {
		mockFns.Health(&client.health.Mock)
	}
	if mockFns.Image != nil {
		mockFns.Image(&client.image.Mock)
	}
	if mockFns.IP != nil {
		mockFns.IP(&client.ip.Mock)
	}
	if mockFns.Machine != nil {
		mockFns.Machine(&client.machine.Mock)
	}
	if mockFns.Network != nil {
		mockFns.Network(&client.network.Mock)
	}
	if mockFns.Partition != nil {
		mockFns.Partition(&client.partition.Mock)
	}
	if mockFns.Project != nil {
		mockFns.Project(&client.project.Mock)
	}
	if mockFns.Size != nil {
		mockFns.Size(&client.size.Mock)
	}
	if mockFns.Sizeimageconstraint != nil {
		mockFns.Sizeimageconstraint(&client.sizeimageconstraint.Mock)
	}
	if mockFns.SwitchOperations != nil {
		mockFns.SwitchOperations(&client.switchoperations.Mock)
	}
	if mockFns.Tenant != nil {
		mockFns.Tenant(&client.tenant.Mock)
	}
	if mockFns.User != nil {
		mockFns.User(&client.user.Mock)
	}
	if mockFns.Version != nil {
		mockFns.Version(&client.version.Mock)
	}
	if mockFns.VPN != nil {
		mockFns.VPN(&client.vpn.Mock)
	}

	return client, client
}

func (c *MetalMockClient) Audit() audit.ClientService {
	return c.audit
}

func (c *MetalMockClient) Filesystemlayout() filesystemlayout.ClientService {
	return c.filesystemlayout
}

func (c *MetalMockClient) Firewall() firewall.ClientService {
	return c.firewall
}

func (c *MetalMockClient) Firmware() firmware.ClientService {
	return c.firmware
}

func (c *MetalMockClient) Health() health.ClientService {
	return c.health
}

func (c *MetalMockClient) Image() image.ClientService {
	return c.image
}

func (c *MetalMockClient) IP() ip.ClientService {
	return c.ip
}

func (c *MetalMockClient) Machine() machine.ClientService {
	return c.machine
}

func (c *MetalMockClient) Network() network.ClientService {
	return c.network
}

func (c *MetalMockClient) Partition() partition.ClientService {
	return c.partition
}

func (c *MetalMockClient) Project() project.ClientService {
	return c.project
}

func (c *MetalMockClient) Size() size.ClientService {
	return c.size
}

func (c *MetalMockClient) Sizeimageconstraint() sizeimageconstraint.ClientService {
	return c.sizeimageconstraint
}

func (c *MetalMockClient) SwitchOperations() switch_operations.ClientService {
	return c.switchoperations
}

func (c *MetalMockClient) Tenant() tenant.ClientService {
	return c.tenant
}

func (c *MetalMockClient) User() user.ClientService {
	return c.user
}

func (c *MetalMockClient) Version() version.ClientService {
	return c.version
}

func (c *MetalMockClient) VPN() vpn.ClientService {
	return c.vpn
}
